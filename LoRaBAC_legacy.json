[
    {
        "id": "220cf6e1806e9280",
        "type": "subflow",
        "name": "Rest API Read downlink/ Write uplink (1) (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 300,
                "y": 360,
                "wires": [
                    {
                        "id": "a5838421e2cd03a1"
                    },
                    {
                        "id": "470d96a2d3c989c3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1760,
                "y": 460,
                "wires": [
                    {
                        "id": "28105a624a6e2409",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "dataDirection",
                "type": "str",
                "value": "uplink",
                "ui": {
                    "icon": "font-awesome/fa-location-arrow",
                    "label": {
                        "en-US": "Direction"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Uplink"
                                },
                                "v": "uplink"
                            },
                            {
                                "l": {
                                    "en-US": "Downlink"
                                },
                                "v": "downlink"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 660,
            "y": 580,
            "wires": [
                {
                    "id": "5cbb3928ea496b3d",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e190f9e188e8203c",
        "type": "function",
        "z": "220cf6e1806e9280",
        "name": "BACnet Object Exist ?",
        "func": "let device = msg.device;\nconst debug = flow.get(\"$parent.g_debug\");\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Stops here OR continue to read Downlink Objects. \n    // Case 200 : \"Object does not exist\" > Create Objects\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"Unknown Object\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} : Some BACnet objects don't exist`);\n            return [{ device: device }, null];       // Create Downlink Objects\n        }\n        else {\n            switch (env.get(\"dataDirection\")) {\n                case \"uplink\":\n                    debug(device, \"up\", `${device.identity.deviceName} (RestAPI) : Write Uplink Objects`);\n\n                    const dataDirection = Object.values(device.bacnet.objects).map(obj => obj.dataDirection);\n\n                    if (dataDirection.some(direction => { return direction === \"downlink\" })) {\n                        return [null, { device: device }];    // Continue to read downlink Objects\n                    }\n                    else {\n                        debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n                        return [null, null];                 // Stops here\n                    }\n                    break;\n                case \"downlink\":\n                    debug(device, \"down\", `${device.identity.deviceName} (RestAPI) : Read Downlink Objects`);\n                    return [null, { device: device, payload: JSON.parse(msg.payload) }];\n                    break;\n                default:\n                    \n            }\n            \n        }\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error : Trying to write a Read Only object (analogInput)\");\n        }\n        return [null, null];\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        return [null, null];\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        return [null, null];\n\n    case 404:\n        node.error(\"Error : 404\");\n        return [null, null];\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        return [null, null];\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        return [null, null];\n\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "96298ca4849ab850",
                "104c0ef0d925948f"
            ],
            [
                "811fa5a77c64df5c"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "7a28a55cbfc2d69c",
        "type": "http request",
        "z": "220cf6e1806e9280",
        "g": "e5cefaeac10e992b",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "e190f9e188e8203c"
            ]
        ]
    },
    {
        "id": "a5838421e2cd03a1",
        "type": "function",
        "z": "220cf6e1806e9280",
        "g": "e5cefaeac10e992b",
        "name": "READ/WRITE Objects",
        "func": "\nlet device = msg.device;\nlet dataDirection = env.get('dataDirection')\nlet bacnetObjects = device.bacnet.objects;\n\nif(device.controller.protocol != \"restAPIBacnet\") return null;\n\nswitch (device.controller.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n    /********* HTTP Request Write Properties\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://@IP/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n        \"headers\": {Authorization: httpAuthentication,\n                  ContentType: \"application/json\"},\n        \n        \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": [\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n    let property_references = [];\n    for (let object in bacnetObjects) {\n      if (bacnetObjects[object].dataDirection == dataDirection) {\n        let temp = {}\n        switch (dataDirection) {\n          case \"uplink\":\n            temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n            property_references.push(JSON.parse(temp));\n            break;\n          case \"downlink\":\n            temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\"}';\n            property_references.push(JSON.parse(temp));\n            break;\n          default:\n            \n        }\n      }\n    }\n\n    // Return HTTP Request\n    switch (dataDirection) {\n      case \"uplink\":\n        return {\n          \"method\": \"POST\",\n          \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n          \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n          },\n          \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n          },\n          \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n          \"device\": device\n        }\n        break;\n      case \"downlink\":\n        return {\n          \"method\": \"POST\",\n          \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/read-property-multiple\",\n          \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n          },\n          \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n          },\n          \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n          \"device\": device\n        }\n        break;\n      default:\n      return\n        break;\n    }\n    \n\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "7a28a55cbfc2d69c"
            ]
        ]
    },
    {
        "id": "96298ca4849ab850",
        "type": "function",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "CREATE Objects",
        "func": "\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/57jbx8w/create-objects-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n\n    /**********  Objects creation on the controller\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + flow.get('$parent.g_controllerIP') +\"/api/rest/v2/batch\",\n        \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                  ContentType: \"application/json\"}\n        \"payload\":{\n            \"requests\": [\n                {\n                  \"id\": \"1\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"AnalogValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiAVTest10\"\n                  }\n                },\n                {\n                  \"id\": \"2\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"BinaryValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiBVTest10\"\n                  }\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n\n    let requests = [], i = 1;\n\n    for (let object in bacnetObjects) {\n      let temp = '{ \"id\": \"' + (i++) + '\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"' + bacnetObjects[object].objectType + '\", \"instance-number\": ' + bacnetObjects[object].instanceNum + ', \"name\": \"' + bacnetObjects[object].objectName + '\" } }';\n      requests.push(JSON.parse(temp));\n    }\n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/batch\",\n      \"headers\": {\n        Authorization: device.controller.httpAuthentication,\n        ContentType: \"application/json\"\n      },\n      \"payload\": { \"requests\": requests },\n      \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n      \"device\": device\n    }\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n  \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 260,
        "wires": [
            [
                "2af332772b84ec70"
            ]
        ]
    },
    {
        "id": "2af332772b84ec70",
        "type": "http request",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "6b75a6065c1fc50d",
                "4240a05777f770c9"
            ]
        ]
    },
    {
        "id": "6b75a6065c1fc50d",
        "type": "function",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "READ/WRITE Objects",
        "func": "\nlet device = msg.device;\nlet previousValues = flow.get(\"$parent.g_previousValues\");\nlet dataDirection = env.get('dataDirection')\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n    ///////////////////////////////////////////////////////////\n    ////// Distech Controls Eclypse APEX\n    ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n    ///////////////////////////////////////////////////////////\n    case \"distechControlsV2\":\n        /********* HTTP Request Write Properties\n        {\n            \"method\": \"POST\",\n            \"url\": \"https://@IP/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n            \"headers\": {Authorization: httpAuthentication,\n                      ContentType: \"application/json\"},\n            \n            \"payload\": {\n                \"encode\": \"text\",\n                \"property-references\": [\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": y,\n                      \"property\": \"presentValue\",\n                      \"value\" : \"xx\"\n                    },\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": y,\n                      \"property\": \"presentValue\",\n                      \"value\" : \"xx\"\n                    },\n                    ...\n                ]\n            },\n            \"requestTimeout\" : xxx (ms)\n        }\n        */\n\n        let property_references = [];\n        for (let object in bacnetObjects) {\n            let temp = {}\n            switch (bacnetObjects[object].dataDirection) {\n                case \"uplink\":\n                    temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    break;\n                case \"downlink\":\n                //  if it exist take the previous value of the downlink BACnet object\n                    if (previousValues.hasOwnProperty(device.identity.deviceName)){\n                        temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + previousValues[device.identity.deviceName].bacnet.objects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    }else{\n                    temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n                    property_references.push(JSON.parse(temp));\n                    }\n\n                    break;\n                default:\n            }\n        \n        }\n\n    // Return HTTP Request\n    return {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n        \"headers\": {\n            Authorization: device.controller.httpAuthentication,\n            ContentType: \"application/json\"\n        },\n        \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": property_references\n        },\n        \"requestTimeout\": global.get('g_httpRequestTimeOut'),\n        \"device\": device\n    }\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "d76ad14d7693d5c7"
            ]
        ]
    },
    {
        "id": "d76ad14d7693d5c7",
        "type": "http request",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 320,
        "wires": [
            [
                "fd584f4af2c64153",
                "28105a624a6e2409"
            ]
        ]
    },
    {
        "id": "4240a05777f770c9",
        "type": "function",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "Creation results",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Objects have been created\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"\\\"status\\\":200\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} (RestAPI) : Some BACnet objects have been created`);\n        }\n        if (msg.payload.includes(\"Instance already exists\") || msg.payload.includes(\"Object with same name already exists\")) {\n            flow.set('g_errorObjectCreation', flow.get('g_errorObjectCreation') + 1);\n            node.error(`${device.identity.deviceName} : Some BACnet objects already existed`);\n        }\n        break;\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        break;\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        break;\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        break;\n\n    case 404:\n        node.error(\"Error : 404\");\n        break;\n\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        break;\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        break;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Le code ajouté ici sera exécuté une fois\n// à chaque démarrage du noeud.\nglobal.set('g_errorObjectCreation', 0);",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "fd584f4af2c64153",
        "type": "function",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "Debug Write",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\ndebug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 320,
        "wires": [
            [
                "414028d0a606e453"
            ]
        ]
    },
    {
        "id": "1e26036d708288cd",
        "type": "change",
        "z": "220cf6e1806e9280",
        "name": "Read/Write in process",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Read/Write in process...\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 600,
        "wires": [
            [
                "5cbb3928ea496b3d"
            ]
        ]
    },
    {
        "id": "246b3625eb6361e6",
        "type": "change",
        "z": "220cf6e1806e9280",
        "name": "Read/Write complete",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Read/Write complete\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "dot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 560,
        "wires": [
            [
                "5cbb3928ea496b3d"
            ]
        ]
    },
    {
        "id": "dce3d9a22945abdf",
        "type": "change",
        "z": "220cf6e1806e9280",
        "name": "Object creation complete",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Object creation complete\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "dot",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 640,
        "wires": [
            [
                "5cbb3928ea496b3d"
            ]
        ]
    },
    {
        "id": "2a5ab6e1a4d630f8",
        "type": "change",
        "z": "220cf6e1806e9280",
        "name": "Object creation in process",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "$env('dataDirection') & \" Object creation in process...\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.shape",
                "pt": "msg",
                "to": "ring",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 520,
        "wires": [
            [
                "5cbb3928ea496b3d"
            ]
        ]
    },
    {
        "id": "414028d0a606e453",
        "type": "link out",
        "z": "220cf6e1806e9280",
        "g": "517ed1fc047e0851",
        "name": "link out Object creation complete",
        "mode": "link",
        "links": [
            "1ad597cc061725eb"
        ],
        "x": 1875,
        "y": 320,
        "wires": []
    },
    {
        "id": "1ad597cc061725eb",
        "type": "link in",
        "z": "220cf6e1806e9280",
        "name": "link in Object creation complete",
        "links": [
            "414028d0a606e453"
        ],
        "x": 295,
        "y": 640,
        "wires": [
            [
                "dce3d9a22945abdf"
            ]
        ]
    },
    {
        "id": "e2697a8eee279994",
        "type": "link in",
        "z": "220cf6e1806e9280",
        "name": "link in Read/Write in progress",
        "links": [
            "470d96a2d3c989c3"
        ],
        "x": 295,
        "y": 600,
        "wires": [
            [
                "1e26036d708288cd"
            ]
        ]
    },
    {
        "id": "0e8ee538302b24fc",
        "type": "link in",
        "z": "220cf6e1806e9280",
        "name": "link in Read/Write complete",
        "links": [
            "221861ae7f09cbc5"
        ],
        "x": 295,
        "y": 560,
        "wires": [
            [
                "246b3625eb6361e6"
            ]
        ]
    },
    {
        "id": "ad02d9ef9c4c7e03",
        "type": "link in",
        "z": "220cf6e1806e9280",
        "name": "link in object creation",
        "links": [
            "104c0ef0d925948f"
        ],
        "x": 295,
        "y": 520,
        "wires": [
            [
                "2a5ab6e1a4d630f8"
            ]
        ]
    },
    {
        "id": "104c0ef0d925948f",
        "type": "link out",
        "z": "220cf6e1806e9280",
        "name": "link out object creation",
        "mode": "link",
        "links": [
            "ad02d9ef9c4c7e03"
        ],
        "x": 1015,
        "y": 260,
        "wires": []
    },
    {
        "id": "470d96a2d3c989c3",
        "type": "link out",
        "z": "220cf6e1806e9280",
        "name": "link out Read/Write in progress",
        "mode": "link",
        "links": [
            "e2697a8eee279994"
        ],
        "x": 335,
        "y": 400,
        "wires": []
    },
    {
        "id": "aa43f64234878f44",
        "type": "function",
        "z": "220cf6e1806e9280",
        "name": "Store Downlink object",
        "func": "/////////////////////////////////////////////////////////////////////\n/////////////////  Store Downlink Objects              //////////////\n/////////////////////////////////////////////////////////////////////\n/* This function stores the downlink data from the controller */\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\n// For InfluxDB support\ndevice.influxdb.source = \"downlink\";\n\nswitch (device.controller.model) {\n    case \"distechControlsV2\":\n        let donwlinkObjects = msg.payload;\n\n        for (let i = 0; i < donwlinkObjects.results.length; i++) {\n            Object.values(bacnetObjects).forEach(obj => {\n                if (donwlinkObjects.results[i].type == obj.objectType && donwlinkObjects.results[i].instance == obj.instanceNum) {\n                    if (obj.objectType == \"analogValue\") obj.value = Number(donwlinkObjects.results[i].value);\n                    if (obj.objectType == \"binaryValue\") obj.value = donwlinkObjects.results[i].value;\n                }\n            });\n        }\n\n        return {\n            device: device\n        };\n\n\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 440,
        "wires": [
            [
                "f0bd9bc8bce2844d"
            ]
        ]
    },
    {
        "id": "221861ae7f09cbc5",
        "type": "link out",
        "z": "220cf6e1806e9280",
        "name": "link out Read/Write complete",
        "mode": "link",
        "links": [
            "0e8ee538302b24fc"
        ],
        "x": 1755,
        "y": 520,
        "wires": []
    },
    {
        "id": "811fa5a77c64df5c",
        "type": "switch",
        "z": "220cf6e1806e9280",
        "name": "",
        "property": "dataDirection",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "downlink",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "uplink",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1175,
        "y": 460,
        "wires": [
            [
                "aa43f64234878f44"
            ],
            [
                "f0bd9bc8bce2844d"
            ]
        ],
        "outputLabels": [
            "downlink",
            "uplink"
        ],
        "l": false
    },
    {
        "id": "5cbb3928ea496b3d",
        "type": "junction",
        "z": "220cf6e1806e9280",
        "x": 600,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f0bd9bc8bce2844d",
        "type": "junction",
        "z": "220cf6e1806e9280",
        "x": 1680,
        "y": 480,
        "wires": [
            [
                "221861ae7f09cbc5",
                "28105a624a6e2409"
            ]
        ]
    },
    {
        "id": "28105a624a6e2409",
        "type": "junction",
        "z": "220cf6e1806e9280",
        "x": 1720,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e5cefaeac10e992b",
        "type": "group",
        "z": "220cf6e1806e9280",
        "name": "Read/Write BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7a28a55cbfc2d69c",
            "a5838421e2cd03a1"
        ],
        "x": 394,
        "y": 319,
        "w": 492,
        "h": 82
    },
    {
        "id": "517ed1fc047e0851",
        "type": "group",
        "z": "220cf6e1806e9280",
        "name": "Create missing BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "96298ca4849ab850",
            "2af332772b84ec70",
            "6b75a6065c1fc50d",
            "d76ad14d7693d5c7",
            "4240a05777f770c9",
            "fd584f4af2c64153",
            "414028d0a606e453"
        ],
        "x": 1154,
        "y": 219,
        "w": 762,
        "h": 142
    },
    {
        "id": "38c4db63982e52db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "43c112e68b3cf83c",
        "type": "tab",
        "label": "LoRaBAC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed2fd3d67146e795",
        "type": "group",
        "z": "43c112e68b3cf83c",
        "name": "MQTT (to Configure)",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0864b962d9e3ad5e",
            "37ed62f3ec9e2592",
            "9349fd25e276d2a8",
            "d3dfdc94e43af17c",
            "ada3301ac3e779d0",
            "6b023c691ab3c88c"
        ],
        "x": 4,
        "y": 119,
        "w": 572,
        "h": 142
    },
    {
        "id": "a4b7105f53de911b",
        "type": "group",
        "z": "43c112e68b3cf83c",
        "name": "Uplink",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "92c6d4961f9b0683",
            "3be82347536eb495",
            "9f54986fcb4e3b53",
            "eb34331b679573e6"
        ],
        "x": 4,
        "y": 289,
        "w": 462,
        "h": 142
    },
    {
        "id": "91179a450fbacd4d",
        "type": "group",
        "z": "43c112e68b3cf83c",
        "name": "Downlink",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4d10687259d3e133",
            "1841b27d70693ad5",
            "9025212872160323",
            "8c94da9a5744a8bb",
            "9c8a1f072584d477"
        ],
        "x": 494,
        "y": 289,
        "w": 892,
        "h": 142
    },
    {
        "id": "c12b8b007da7a8a0",
        "type": "group",
        "z": "43c112e68b3cf83c",
        "name": "MQTT send downlink",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "702801df4627be4e",
            "5078b3f748816c50",
            "c0576bf9d44a580a",
            "87f633034dd5bdcb",
            "ad07a392a25d69d1",
            "df9fb9597609f005",
            "ee4cb2eba03fd5ac"
        ],
        "x": 4,
        "y": 459,
        "w": 722,
        "h": 142
    },
    {
        "id": "52b3c397c3a6a0a7",
        "type": "group",
        "z": "43c112e68b3cf83c",
        "name": "Configuration",
        "style": {
            "label": true,
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "1aca54035ae6404d",
            "461c91ce371d8aad",
            "d46645deffc4a90d"
        ],
        "x": 4,
        "y": 19,
        "w": 542,
        "h": 82
    },
    {
        "id": "1841b27d70693ad5",
        "type": "junction",
        "z": "43c112e68b3cf83c",
        "g": "91179a450fbacd4d",
        "x": 880,
        "y": 360,
        "wires": [
            [
                "4d10687259d3e133"
            ]
        ]
    },
    {
        "id": "9f54986fcb4e3b53",
        "type": "junction",
        "z": "43c112e68b3cf83c",
        "g": "a4b7105f53de911b",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "92c6d4961f9b0683",
                "3be82347536eb495"
            ]
        ]
    },
    {
        "id": "df9fb9597609f005",
        "type": "junction",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "x": 80,
        "y": 540,
        "wires": [
            [
                "ad07a392a25d69d1",
                "5078b3f748816c50"
            ]
        ]
    },
    {
        "id": "d3dfdc94e43af17c",
        "type": "junction",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "x": 235,
        "y": 180,
        "wires": [
            [
                "37ed62f3ec9e2592",
                "ada3301ac3e779d0"
            ]
        ]
    },
    {
        "id": "ee4cb2eba03fd5ac",
        "type": "junction",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "702801df4627be4e",
                "87f633034dd5bdcb"
            ]
        ]
    },
    {
        "id": "ada3301ac3e779d0",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "name": "Create Device Object",
        "func": "let deviceList = flow.get('g_deviceList');\nlet networkServer;\nlet deviceName, deviceType, deviceNum, devEUI, topicDownlink;\nlet devicePayload = {};\nlet previousValues = flow.get(\"g_previousValues\");\n\nlet topicUp = msg.topic;\n\n// Guess the NetworkServer from the received frame\nif (msg.payload.hasOwnProperty('deviceInfo'))       networkServer = \"chirpstack\";\nif (msg.payload.hasOwnProperty('end_device_ids'))   networkServer = \"tts\";\nif (msg.payload.hasOwnProperty('DevEUI_uplink'))    networkServer = \"actility\";\nif (msg.payload.hasOwnProperty('dc'))               networkServer = \"helium\";\n\n// Reject messages from Actility :\nif ( 'DevEUI_notification' in msg.payload || 'DevEUI_notification' in msg.payload)  return null;\nif ( 'DevEUI_downlink_Rejected' in msg.payload) {\n    node.error(\"Actility : Downlink Message Rejected\");\n    return null;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"tts\") {\n    deviceName = msg.payload.end_device_ids.device_id;\n    topicDownlink = topicUp.replace(flow.get('g_tts_topicUplinkSuffix'), \"\") + flow.get('g_tts_topicDownlinkSuffix');\n    devEUI = msg.payload.end_device_ids.dev_eui;\n    if (!Object.keys(msg.payload.uplink_message).some(element => element == \"decoded_payload\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.uplink_message.decoded_payload;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Helium Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"helium\") {\n    deviceName = msg.payload.name;\n    topicDownlink = topicUp.replace(flow.get('g_helium_topicUplinkSuffix'), \"\") + flow.get('g_helium_topicDownlinkSuffix');\n    devEUI = msg.payload.dev_eui;\n    if (msg.payload.decoded.status == \"empty\") {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.decoded.payload;\n}\n//////////////////////////////////////////////////////////////////////////\n// Chirpstack Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"chirpstack\") {\n    if (msg.payload.fPort == 0) return 0;\n    deviceName = msg.payload.deviceInfo.deviceName;\n    topicDownlink = topicUp.replace(flow.get('g_chirp_topicUplinkSuffix'), \"\") + flow.get('g_chirp_topicDownlinkSuffix');\n    devEUI = msg.payload.deviceInfo.devEui;\n    if (!Object.keys(msg.payload).some(element => element == \"object\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.object;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"actility\") {\n    deviceName = msg.payload.DevEUI_uplink.CustomerData.name;\n    topicDownlink = topicUp.replace(flow.get('g_actility_topicUplinkSuffix'), \"\") + flow.get('g_actility_topicDownlinkSuffix');\n    devEUI = msg.payload.DevEUI_uplink.DevEUI;\n    if (!Object.keys(msg.payload.DevEUI_uplink).some(element => element == \"payload\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.DevEUI_uplink.payload;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Checks\n/////////////////////////////////////////////////////////////////////////\nconst match = deviceName.match(/^(.*)-(\\d+)$/);\nif (match) {\n    deviceType = match[1];  // The part before the last dash\n    deviceNum = parseInt(match[2], 10);  // The number at the end, converted to an integer\n}\nelse {\n    node.error(\"Error: Device Name does not respect *xxx - num* format\",\n                {\n                    errorType: \"deviceName\",\n                    value: deviceName,\n                });\n    return null;\n}\n\nif ((deviceNum == 0)) {\n    node.error('Error: Device Num is 0 is not allowed',\n        {\n            errorType: \"deviceName\",\n            value: deviceName,\n        });\n    return null;\n}\n\nif (deviceList[deviceType] == undefined) {\n    node.error('Error: Device Type does not belong to the Device List',\n        {\n            errorType: \"deviceName\",\n            value: deviceName,\n        });\n    return null;\n}\n\n// Check deviceNum overflow\nif (deviceNum > deviceList[deviceType].identity.maxDevNum) {\n    node.error('Error: Device number is too high',\n        {\n            errorType: \"deviceName\",\n            value: deviceName,\n        });\n    return null;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Create a copy of the \"deviceType\" object of the \"deviceList\" structure\n/////////////////////////////////////////////////////////////////////////\nlet device = JSON.parse(JSON.stringify(deviceList[deviceType]));\n\ndevice.identity.deviceName = deviceName;\ndevice.identity.deviceType = deviceType;\ndevice.identity.deviceNum = deviceNum;\ndevice.identity.devEUI = devEUI;\ndevice.mqtt.topicDownlink = topicDownlink;\n\nfor (let object in device.bacnet.objects) {\n    // Update instanceNum\n    switch (device.bacnet.objects[object].assignementMode) {\n        case \"manual\":\n            \n            break;\n        case \"auto\":\n            switch (device.bacnet.objects[object].objectType) {\n                case \"analogValue\":\n                    device.bacnet.objects[object].instanceNum += device.bacnet.offsetAV + (device.bacnet.instanceRangeAV * deviceNum);\n                    break;\n                case \"binaryValue\":\n                    device.bacnet.objects[object].instanceNum += device.bacnet.offsetBV + (device.bacnet.instanceRangeBV * deviceNum);\n                    break;\n                default:\n                    node.error(\"Object type of \" + object + \" is unknown : \" + device.bacnet.objects[object].objectType);\n                    return null;\n                    \n            }\n            break;\n        default:\n            \n    }\n\n    // Update objectName\n    device.bacnet.objects[object].objectName = deviceName + '-' + object + '-' + device.bacnet.objects[object].instanceNum;\n    // Update value\n    if (device.bacnet.objects[object].dataDirection == \"uplink\") {\n        let lorawanPayloadName = device.bacnet.objects[object].lorawanPayloadName;\n        let keys = lorawanPayloadName.split(/[\\.\\[\\]]/).filter(key => key !== \"\");\n        let value = keys.reduce((accumulator, currentValue) => accumulator[currentValue], devicePayload);\n        device.bacnet.objects[object].value = value;\n    }\n    // Check value\n    if (device.bacnet.objects[object].value == undefined || typeof device.bacnet.objects[object].value == \"object\") {\n        node.error(`Device : ${device.identity.deviceName} - Object : ${object} - Wrong Payload decoder or Wrong Device description`);\n        return null;\n    }\n\n    if (device.controller.protocol == \"bacnet\") {\n        // \"restAPIBacnet\" and \"bacnet\" compatibility \n        switch (device.bacnet.objects[object].objectType) {\n            case \"analogValue\": device.bacnet.objects[object].objectType = 2; break;\n            case \"binaryValue\": device.bacnet.objects[object].objectType = 5; break;\n        }\n        // Keep only uplink payload in a new object\n        device.bacnet.uplinkKeys = Object.entries(device.bacnet.objects)\n            .filter(([key, obj]) => obj.dataDirection === \"uplink\")\n            .map(([key, obj]) => key);\n    }\n}\n\n// For debug\ndevice.transmitTime = Date.now();\n\n// For InfluxDB support\ndevice.influxdb = {\n    \"source\": \"uplink\"\n};\n// To save previous values\nif (!previousValues.hasOwnProperty(device.identity.deviceName)){\n    \n    previousValues[device.identity.deviceName] = RED.util.cloneMessage(device);\n    \n}\n\nreturn {\n    \"device\": device\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "6b023c691ab3c88c"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "0864b962d9e3ad5e",
        "type": "mqtt in",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "name": "MQTT Subscriber",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "d3dfdc94e43af17c"
            ]
        ],
        "info": "\r\n# MQTT Subscriber node\r\n\r\n - How to configure this node\r\n    -\r\n    The configuration off this node depend of which LNS or MQTT broker you use.\r\n\r\n    - For The Things Network\r\n        - \r\n        With **TTN LNS** you have to use the following topic :\r\n            ***`v3/{application_id}@ttn/devices/+/up`*** \\\r\n        Replace `{application_id}` by your application id in TTN.\\\r\n         And don't forget the `@ttn`\r\n    - For The Things Stack\r\n        - \r\n        With **TTS LNS** you have to use the following topic :\r\n            ***`v3/{application_id}/devices/+/up`*** \\\r\n        Replace `{application_id}` by your application id in TTS.\r\n\r\n    - For Chirpstack\r\n        - \r\n        With **Chirpstack LNS** you have to use the following topic :\r\n            ***`application/{application_id}/device/+/event/up`*** \\\r\n        Replace `{application_id}` by your application id (it's the number, not the name !).\r\n    - For Actility\r\n        - \r\n        if you use **Actility LNS** see the [documentation](https://docs.thingpark.com/thingpark-x/latest/Connector/BROKER_MQTT/) for using actillity broker\r\n\r\n        - For actility-USMB Broker : ***`univ-smb/devices/+/uplink`***\r\n        - For HiveMQ Broker : ***`mqtt/things/+/uplink`***\r\n        \r\n    - For other LNS or MQTT broker\r\n        - \r\n        If you use any other LNS or MQTT broker please refer to their documentation to configure this MQTT node."
    },
    {
        "id": "87f633034dd5bdcb",
        "type": "mqtt out",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "name": "MQTT Publisher",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "",
        "x": 540,
        "y": 560,
        "wires": []
    },
    {
        "id": "92c6d4961f9b0683",
        "type": "subflow:220cf6e1806e9280",
        "z": "43c112e68b3cf83c",
        "g": "a4b7105f53de911b",
        "name": "Rest API Read downlink/Write uplink",
        "x": 290,
        "y": 330,
        "wires": [
            [
                "9c8a1f072584d477"
            ]
        ]
    },
    {
        "id": "4d10687259d3e133",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "91179a450fbacd4d",
        "name": "Downlink Strategies",
        "func": "///////////////////////////////////////////////////////////\n////// This part is device dependant\n////// The configuration depends on the downlink strategy\n///////////////////////////////////////////////////////////\n\nlet device = msg.device;\nif (device.lorawan.hasOwnProperty(\"defaultValuesForDownlink\")){\n    var staticDownlinkObjects = device.lorawan.defaultValuesForDownlink\n}\nlet bacnetObjects = device.bacnet.objects;\nconst debug = flow.get(\"g_debug\");\nlet downlinkLowPriorityObject = 0;\nlet previousValues = RED.util.cloneMessage(flow.get(\"g_previousValues\"));\nlet previousBacnetObject = previousValues[device.identity.deviceName].bacnet.objects;\nlet payload={};\n\nfunction downlinkPayloadCreation(downlinkObjectToSend) {\n    //Creation of the downlink payload\n    for (let obj in bacnetObjects){\n        if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[downlinkObjectToSend].downlinkPort){\n            let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";                        \n            payload = { ...payload, ...JSON.parse(temp) }\n        }\n    }\n    // Chek if there are other values to add to the payload\n    if (device.lorawan.hasOwnProperty(\"defaultValuesForDownlink\") ){\n        if (device.lorawan.defaultValuesForDownlink.hasOwnProperty(\"fPort_\" + bacnetObjects[downlinkObjectToSend].downlinkPort)){\n            for (let obj in staticDownlinkObjects[\"fPort_\"+ bacnetObjects[downlinkObjectToSend].downlinkPort]){\n                    let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(staticDownlinkObjects[\"fPort_\"+ bacnetObjects[downlinkObjectToSend].downlinkPort][obj]) + \" }\";                        \n                    payload = { ...payload, ...JSON.parse(temp) }\n    \n            }\n        }\n    }\n    msg ={\n        \"payload\" : payload,\n        \"device\" :device\n    }\n    msg.device.lorawan.downlinkPort = bacnetObjects[downlinkObjectToSend].downlinkPort\n                        \n}\n\nfor (let object in bacnetObjects) {\n\n    if (bacnetObjects[object].dataDirection === \"downlink\") {\n        \n        switch (bacnetObjects[object].downlinkPortPriority) {\n            case \"high\":\n                switch (bacnetObjects[object].downlinkStrategie) {\n                    case \"onChangeOfThisValue\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority COV\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                            return msg\n                        }\n                        break;\n                    case \"onChangeOfThisValueWithinRange\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority COVWR\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                            return msg\n                        }\n                        break;\n                    case \"compareToUplinkObjectWithinRange\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority CUVWR\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[object].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                            return msg\n                        }\n                        break;\n                    case \"compareToUplinkObject\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink high priority CUV\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[object].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value}  != ${object} ${bacnetObjects[object].value}`);\n                            //Creation of the downlink payload\n                            downlinkPayloadCreation(object)\n                            return msg\n                        }\n                        break;\n                    default:\n                        \n                }\n                \n                break;\n            case \"low\":\n                //In case of low priority downlink the object name is kept till the end of the for loop \n                // to be sur that there is not any high priority downlink to send \n                switch (bacnetObjects[object].downlinkStrategie) {\n                    case \"onChangeOfThisValue\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"onChangeOfThisValueWithinRange\":\n                        if (bacnetObjects[object].value != previousBacnetObject[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"compareToUplinkObjectWithinRange\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"compareToUplinkObject\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    default:\n                        \n                }\n                break;\n            default:\n\n        }\n    }\n}\nif (downlinkLowPriorityObject != 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink low priority\" });\n    switch (bacnetObjects[downlinkLowPriorityObject].downlinkStrategie) {\n        case \"onChangeOfThisValue\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"onChangeOfThisValueWithinRange\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${previousBacnetObject[downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"compareToUplinkObjectWithinRange\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"compareToUplinkObject\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        default:\n                        \n    }\n    //Creation of the dowlink payload\n    downlinkPayloadCreation(downlinkLowPriorityObject)\n    return msg            \n}else{\n\n    node.status({fill: \"green\", shape: \"dot\" ,text: \"No downlink\"});\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "9025212872160323"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "702801df4627be4e",
        "type": "debug",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "name": "Debug Downlink message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 500,
        "wires": []
    },
    {
        "id": "5078b3f748816c50",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "name": "Create Downlink Message",
        "func": "\nlet device = msg.device;\nlet downlinkJson = {};\nconst debug = flow.get('g_debug');\n\n// Modify the downlink object according to the lorawanPayloadName.\n\nfor (let object in msg.payload) {\n    // Don't do any changes if lorawanPayloadName is the same as the BACnet Object name.\n    if (!Object.keys(device.bacnet.objects).some(element => element == device.bacnet.objects[object].lorawanPayloadName)) {\n        msg.payload[device.bacnet.objects[object].lorawanPayloadName] = msg.payload[object];\n        delete msg.payload[object];\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"tts\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink + (device.lorawan.flushDownlinkQueue ? \"/replace\" : \"/push\"),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": device.lorawan.downlinkPort,\n                    \"decoded_payload\": msg.payload,\n                    \"priority\": \"NORMAL\"\n                },\n            ]\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"helium\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"payload_raw\": \"SGVsbG8sIHdvcmxkIQ==\",\n            \"port\": device.lorawan.downlinkPort,\n            \"confirmed\": false\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n//////////////////////////////////////////////////////////////////////////\n// Chipstack Network Server \n/////////////////////////////////////////////////////////////////////////\n// 1. Flush the downlink Queue\n\nif (device.lorawan.networkServer == \"chirpstack\") {\n    if (device.lorawan.flushDownlinkQueue == true) {\n\n        //We include flow value from libraries\n        var grpc = flow.get('grpc');\n        var device_grpc = flow.get('device_grpc');\n        var device_pb = flow.get('device_pb');\n\n        // This must point to the ChirpStack API interface.\n        const server = \"chirpstack.univ-lorawan.fr:9090\";\n        // The DevEUI for which we want to enqueue the downlink.\n        const devEui = device.identity.devEUI;\n        \n        // The API token (can be obtained through the ChirpStack web-interface).\n        const apiToken = device.lorawan.chirpstack.grpcApikey;\n\n        // Create the client for the DeviceService.\n        const deviceService = new device_grpc.DeviceServiceClient(\n            server,\n            grpc.credentials.createInsecure(),\n        );\n\n        // Create the Metadata object.\n        const metadata = new grpc.Metadata();\n        metadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n        //Flush downlink queue request\n        const flushReq = new device_pb.FlushDeviceQueueRequest();\n        flushReq.setDevEui(devEui);\n\n        //Send the request\n        deviceService.flushQueue(flushReq, metadata, (err, resp) => {\n            if (err !== null) {\n                //node.error(`Can't flush ChirpStack downlink queue :  ${err}`);\n            }\n        });\n    }\n\n    // 2. Prepare downlink JSON\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"devEui\": device.identity.devEUI,\n            \"confirmed\": false,\n            \"fPort\": device.lorawan.downlinkPort,\n            \"object\": msg.payload\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n    return downlinkJson;\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"actility\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"DevEUI_downlink\": {\n                \"DevEUI\": device.identity.devEUI,\n                \"FPort\": device.lorawan.downlinkPort,\n                \"payload\": msg.payload,\n                \"FlushDownlinkQueue\": String(+device.lorawan.flushDownlinkQueue),\n                \"DriverCfg\": {\n                    \"app\": {\n                        \"pId\": device.lorawan.actility.driver.pId,\n                        \"mId\": device.lorawan.actility.driver.mId,\n                        \"ver\": device.lorawan.actility.driver.ver\n                    }\n                }\n            }\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "GrpcJs",
                "module": "@grpc/grpc-js"
            }
        ],
        "x": 250,
        "y": 560,
        "wires": [
            [
                "ee4cb2eba03fd5ac"
            ]
        ],
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "ad07a392a25d69d1",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "name": "Update previousValues",
        "func": "let previousValues = flow.get(\"g_previousValues\");\nlet deviceName = msg.device.identity.deviceName;\nlet previousBacnetObject = previousValues[deviceName].bacnet.objects;\n\nfor (let object in msg.payload) {\n    previousBacnetObject[object].value =  msg.payload[object] ;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 520,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-history"
    },
    {
        "id": "3be82347536eb495",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "a4b7105f53de911b",
        "name": "WRITE uplink objects",
        "func": "let client = new nodeBacnet();\nlet device = msg.device;\nlet debug = flow.get(\"g_debug\");\nlet temp;\n\n// If the device controller protocol is not \"bacnet\" there is no need to be here \nif(device.controller.protocol != \"bacnet\") return null;\n\nlet bacnetObject = device.bacnet.objects;\n\nfor (let object in bacnetObject) {\n  if (bacnetObject[object].dataDirection === \"uplink\") {\n    //  Read of the uplink bacnet objects\n    client.writeProperty(device.controller.ipAddress, {type: bacnetObject[object].objectType, instance: bacnetObject[object].instanceNum}, 85, [{type: ((bacnetObject[object].objectType == 2) ? 4 : 0), value: bacnetObject[object].value}], (err, value) => {\n      if(err){\n          msg.payload = err;\n          node.status({fill:\"red\",shape:\"dot\",text:\"BACnet \"+ err});\n          node.error(\"Error writing bacnet objects\", {\n            errorType: \"nativeBACnet\",\n            error: err,\n            \n          });\n          return null;\n        } else {\n          msg.payload = value;\n          debug(device, \"up\",`${device.identity.deviceName} (${device.controller.protocol}) : Write Uplink Objects`)\n          node.status({fill:\"green\",shape:\"dot\",text:\"Native BACnet\"});\n        }\n    });\n\n  }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "nodeBacnet",
                "module": "node-bacnet"
            }
        ],
        "x": 240,
        "y": 390,
        "wires": [
            [
                "8c94da9a5744a8bb"
            ]
        ]
    },
    {
        "id": "8c94da9a5744a8bb",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "91179a450fbacd4d",
        "name": "READ downlink objects",
        "func": "let client = new nodeBacnet();\nlet device = msg.device;\nlet bacnetObject = device.bacnet.objects;\nlet debug = flow.get(\"g_debug\");\nlet requestArray = [];\n\nif (device.controller.protocol != \"bacnet\") return null;\n\n// Build the request array\nfor (let object in bacnetObject) {\n  if (bacnetObject[object].dataDirection === \"downlink\") {\n    let temp = JSON.parse('{\"objectId\": { \"type\":' + bacnetObject[object].objectType + ', \"instance\":' + bacnetObject[object].instanceNum + '},\"properties\": [ {\"id\": 85} ] }');\n    requestArray.push(temp);\n  }\n}\n\n// Use a Promise to manage the asynchronous function\nreturn new Promise((resolve, reject) => {\n  client.readPropertyMultiple(device.controller.ipAddress, requestArray, (err, value) => {\n    if (err) {\n      node.error(err);\n      node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet \" + err });\n      reject(err); // reject the promise in case of error\n    } else if (value) {\n      msg.payload = value;\n      debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Read downlink Objects`);\n      node.status({ fill: \"green\", shape: \"dot\", text: \"Native BACnet\" });\n      resolve(msg); // resolve the promise with the node message\n    }\n  });\n}).then((msg) => {\n  // once the promise has been resolved\n  let values = msg.payload.values || [];\n  // store the values in the device objects value property\n  for (let i = 0; i < values.length; i++) {\n    Object.values(bacnetObject).forEach(obj => {\n      if (values[i].objectId.type == obj.objectType && values[i].objectId.instance == obj.instanceNum) {\n        obj.value = values[i].values[0].value[0].value;\n      }\n    });\n  }\n  return {\n    \"device\":device\n  };\n}).catch((err) => {\n  node.status({ fill: \"red\", shape: \"dot\", text: err });\n  node.error(\"Error reading bacnet objects\", {\n    errorType: \"nativeBACnet\",\n    error: err,\n\n  });\n  return null;\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "nodeBacnet",
                "module": "node-bacnet"
            }
        ],
        "x": 710,
        "y": 390,
        "wires": [
            [
                "1841b27d70693ad5"
            ]
        ]
    },
    {
        "id": "9025212872160323",
        "type": "link out",
        "z": "43c112e68b3cf83c",
        "g": "91179a450fbacd4d",
        "name": "MQTT send downlink",
        "mode": "link",
        "links": [
            "c0576bf9d44a580a"
        ],
        "x": 1260,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "c0576bf9d44a580a",
        "type": "link in",
        "z": "43c112e68b3cf83c",
        "g": "c12b8b007da7a8a0",
        "name": "MQTT downlink In",
        "links": [
            "9025212872160323"
        ],
        "x": 45,
        "y": 540,
        "wires": [
            [
                "df9fb9597609f005"
            ]
        ]
    },
    {
        "id": "37ed62f3ec9e2592",
        "type": "debug",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "name": "debug MQTT uplink",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 220,
        "wires": []
    },
    {
        "id": "9c8a1f072584d477",
        "type": "subflow:220cf6e1806e9280",
        "z": "43c112e68b3cf83c",
        "g": "91179a450fbacd4d",
        "name": "Rest API Read downlink/Write uplink",
        "env": [
            {
                "name": "dataDirection",
                "value": "downlink",
                "type": "str"
            }
        ],
        "x": 670,
        "y": 330,
        "wires": [
            [
                "1841b27d70693ad5"
            ]
        ]
    },
    {
        "id": "9349fd25e276d2a8",
        "type": "link in",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "name": "Tests frame out",
        "links": [
            "613244fe49aa76c6"
        ],
        "x": 175,
        "y": 200,
        "wires": [
            [
                "d3dfdc94e43af17c"
            ]
        ]
    },
    {
        "id": "1aca54035ae6404d",
        "type": "function",
        "z": "43c112e68b3cf83c",
        "g": "52b3c397c3a6a0a7",
        "name": "TO CONFIGURE",
        "func": "/////////////////////////////////////////////////////\n////////////    TO CONFIGURE      ///////////////////\n/////////////////////////////////////////////////////\n\nconst heliumDownlinkSuffix = \"TO_CONFIGURE\";\nconst heliumUplinkSuffix = \"TO_CONFIGURE\";\n\n// configuration.js files (on GitHub) provides   //\n// examples of deviceList configuration          //\n\nlet deviceList = {\n    \n\n\n    \n}\n/////////////////////////////////////////////////\n/////////////   DO NOT MODIFY ///////////////////\n/////////////////////////////////////////////////\n\nconst networkServerSupported = [\"tts\", \"chirpstack\", \"actility\", \"helium\"];\nconst downlinkStrategies = [\"compareToUplinkObject\", \"compareToUplinkObjectWithinRange\", \"onChangeOfThisValue\", \"onChangeOfThisValueWithinRange\"];\nconst protocolSupported = [\"restAPIBacnet\", \"bacnet\"];\n\n// Store flow variables\nflow.set('g_httpRequestTimeOut', 5000);\nflow.set('g_tts_topicDownlinkSuffix', \"/down\");\nflow.set('g_tts_topicUplinkSuffix', \"/up\");\nflow.set('g_chirp_topicDownlinkSuffix', \"/command/down\");\nflow.set('g_chirp_topicUplinkSuffix', \"/event/up\");\nflow.set('g_actility_topicDownlinkSuffix', \"/downlink\");\nflow.set('g_actility_topicUplinkSuffix', \"/uplink\");\nflow.set('g_helium_topicDownlinkSuffix', heliumDownlinkSuffix);\nflow.set('g_helium_topicUplinkSuffix', heliumUplinkSuffix);\nif (flow.get(\"g_previousValues\") === undefined) {\n    flow.set(\"g_previousValues\", {});\n}\n\n// Debug function\nconst debug = function (device, debugType, debugText) {\n    if (debugType == \"forceOn\") {\n        node.warn(debugText);\n    }\n    else if (device.controller.debug.some(element => element == \"all\" || element == debugType)) {\n        node.warn(debugText);\n    }\n    else {\n        return null;\n    }\n}\nflow.set(\"g_debug\", debug);\n\n// Controller HTTP Autentification key\nfor (let device in deviceList) {\n    const buffer = Buffer.from(deviceList[device].controller.login + ':' + deviceList[device].controller.password);\n    deviceList[device].controller.httpAuthentication = \"Basic \" + buffer.toString('base64');\n}\n\n////////////////////////////////\n// Check configuration settings\n////////////////////////////////\nlet objectInstanceArrayAV = [], objectInstanceArrayBV = [];\nlet maxDevNumAV, maxDevNumBV;\n\nfor (let device in deviceList) {\n\n    // Add \"identity\" and \"mqtt\" properties\n    deviceList[device].mqtt = {};\n\n    // Check LoRaWAN Network Servers [\"tts\", \"chirpstack\", \"actility\"]\n    if (!networkServerSupported.some(element => element == deviceList[device].lorawan.networkServer)) {\n        node.error(\"Error Unknow network server\",\n            {\n                errorType: \"deviceListLoRaWANConfiguration\",\n                device: device,\n                property: \"networkServer\",\n                value: deviceList[device].lorawan.networkServer\n            });\n\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Network Server not supported\" });\n        return null;\n    }\n\n    // Check that bacnetObject had every necessary properties\n    for (let object in deviceList[device].bacnet.objects) {\n        if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"lorawanPayloadName\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"lorawanPayloadName\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"objectType\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"objectType\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"assignementMode\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"assignementMode\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"instanceNum\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"instanceNum\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"dataDirection\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"dataDirection\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"value\")) {\n            node.error(\"Error missing object property\",\n                {\n                    errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                    device: device,\n                    object: object,\n                    property: \"value\"\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n            return null;\n        } else if (deviceList[device].bacnet.objects[object].dataDirection === \"downlink\") {\n\n            if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"downlinkPort\")) {\n                node.error(\"Error missing object property\",\n                    {\n                        errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                        device: device,\n                        object: object,\n                        property: \"downlinkPort\"\n                    });\n                node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                return null;\n            } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"downlinkPortPriority\")) {\n                node.error(\"Error missing object property\",\n                    {\n                        errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                        device: device,\n                        object: object,\n                        property: \"downlinkPortPriority\"\n                    });\n                node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                return null;\n            } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"downlinkStrategie\")) {\n                node.error(\"Error missing object property\",\n                    {\n                        errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                        device: device,\n                        object: object,\n                        property: \"downlinkStrategie\"\n                    });\n                node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                return null;\n            } else if (!downlinkStrategies.some(element => element == deviceList[device].bacnet.objects[object].downlinkStrategie)){\n                node.error(\"Error incorrect downlink strategie\",\n                    {\n                        errorType: \"deviceListBACnetObjectConfiguration\",\n                        device: device,\n                        property: \"downlinkStrategie\",\n                        object: object,\n                        value: deviceList[device].bacnet.objects[object].downlinkStrategie,\n                    });\n                node.status({ fill: \"red\", shape: \"dot\", text: \"incorrect downlink strategie\" });\n\n            } else if (deviceList[device].bacnet.objects[object].downlinkStrategie === \"compareToUplinkObject\" || deviceList[device].bacnet.objects[object].downlinkStrategie === \"compareToUplinkObjectWithinRange\") {\n\n                if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"uplinkToCompareWith\")) {\n                    node.error(\"Error missing object property\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                            device: device,\n                            object: object,\n                            property: \"uplinkObjectToCompareWith\"\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                    return null;\n                } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"range\") && deviceList[device].bacnet.objects[object].downlinkStrategie === \"compareToUplinkObjectWithinRange\"){\n                    node.error(\"Error missing object property\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                            device: device,\n                            object: object,\n                            property: \"range\"\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                    return null ;\n                } else if ((deviceList[device].bacnet.objects[object].range?.length != 2 || deviceList[device].bacnet.objects[object].range[1] < deviceList[device].bacnet.objects[object].range[0]) && deviceList[device].bacnet.objects[object].downlinkStrategie === \"compareToUplinkObjectWithinRange\") {\n                    node.error(\"Error incorrect Range\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfiguration\",\n                            device: device,\n                            property: \"range\",\n                            object: object,\n                            value: deviceList[device].bacnet.objects[object].range,\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"incorrect range\" });\n                    return null;\n                }\n            } else if (deviceList[device].bacnet.objects[object].downlinkStrategie === \"onChangeOfThisValueWithinRange\") {\n                if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"range\")) {\n                    node.error(\"Error missing object property\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfigurationMissingProperty\",\n                            device: device,\n                            property: \"range\"\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"Missing object property\" });\n                    return null;\n                } else if (deviceList[device].bacnet.objects[object].range.length != 2 || deviceList[device].bacnet.objects[object].range[1] < deviceList[device].bacnet.objects[object].range[0]) {\n                    node.error(\"Error incorrect range\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfiguration\",\n                            device: device,\n                            property: \"range\",\n                            object: object,\n                            value: deviceList[device].bacnet.objects[object].range,\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"incorrect range\" });\n                    return null;\n                }\n            }\n        }\n    }\n\n    // Check device.controller.protocol [\"restAPIBacnet\", \"bacnet\"]\n    if (!protocolSupported.some(element => element == deviceList[device].controller.protocol)) {\n        node.error(\"Error Unknow controller protocol\",\n            {\n                errorType: \"deviceListControllerConfiguration\",\n                device: device,\n                property: \"protocol\",\n                value: deviceList[device].controller.protocol\n            });\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Controller protocol not supported\" });\n        return null;\n    }\n\n    // Check device.bacnet.instanceRange >= Number of BACnet object in the deviceList\n    let instanceRangeAV = 0, instanceRangeBV = 0;\n    let assignementMode = null;\n\n    for (let object in deviceList[device].bacnet.objects) {\n        if (assignementMode === null) {\n            assignementMode = deviceList[device].bacnet.objects[object].assignementMode\n        } else if (assignementMode != deviceList[device].bacnet.objects[object].assignementMode) {\n            node.error(\"Error Objects have different assignement mode\",\n                {\n                    errorType: \"deviceListBACnetObjectConfiguration\",\n                    device: device,\n                    property: \"assignementMode\",\n                    object: object,\n                    objectType: \"any\",\n                    value: deviceList[device].bacnet.objects[object].assignementMode,\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: object + \" different assignement mode\" });\n            return null\n        }\n        switch (deviceList[device].bacnet.objects[object].objectType) {\n            case \"analogValue\":\n                if (deviceList[device].bacnet.objects[object].instanceNum >= deviceList[device].bacnet.instanceRangeAV && deviceList[device].bacnet.objects[object].assignementMode != \"manual\") {\n                    node.error(\"Error InstanceNum too high\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfiguration\",\n                            device: device,\n                            property: \"instanceNum\",\n                            object: object,\n                            objectType: \"analog value\",\n                            value: deviceList[device].bacnet.objects[object].instanceNum,\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: object + \" instanceNum too high\" });\n                    return null;\n                } else {\n                    instanceRangeAV++;\n                }\n                break;\n            case \"binaryValue\":\n                if (deviceList[device].bacnet.objects[object].instanceNum >= deviceList[device].bacnet.instanceRangeBV && deviceList[device].bacnet.objects[object].assignementMode != \"manual\") {\n                    node.error(\"Error InstanceNum too high\",\n                        {\n                            errorType: \"deviceListBACnetObjectConfiguration\",\n                            device: device,\n                            property: \"instanceNum\",\n                            object: object,\n                            objectType: \"binary value\",\n                            value: deviceList[device].bacnet.objects[object].instanceNum,\n                        });\n                    node.status({ fill: \"red\", shape: \"dot\", text: object + \" instanceNum too high\" });\n                    return null;\n                } else {\n                    instanceRangeBV++;\n                }\n                break;\n            default:\n\n        }\n        if (deviceList[device].bacnet.objects[object].instanceNum < 0) {\n            node.error(\"Error Negative instanceNum\",\n                {\n                    errorType: \"deviceListBACnetObjectConfiguration\",\n                    device: device,\n                    property: \"instanceNum\",\n                    object: object,\n                    objectType: \"any\",\n                    value: deviceList[device].bacnet.objects[object].instanceNum\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: object + \"Negative instanceNum\" });\n            return null;\n        }\n    }\n    if (deviceList[device].bacnet.instanceRangeAV < instanceRangeAV) {\n        node.error(\"Error InstanceRange too small\",\n            {\n                errorType: \"deviceListBACnetConfiguration\",\n                device: device,\n                property: \"instanceRangeAV\",\n                value: deviceList[device].bacnet.instanceRangeAV,\n            });\n        node.status({ fill: \"red\", shape: \"dot\", text: \"InstanceRange too small\" });\n        return null;\n    }\n    if (deviceList[device].bacnet.instanceRangeBV < instanceRangeBV) {\n        node.error(\"Error InstanceRange too small\",\n            {\n                errorType: \"deviceListBACnetConfiguration\",\n                device: device,\n                property: \"instanceRangeBV\",\n                value: deviceList[device].bacnet.instanceRangeBV,\n            });\n        node.status({ fill: \"red\", shape: \"dot\", text: \"InstanceRange too small\" });\n        return null;\n    }\n\n    // Build an array with offsetAV, instanceRangeAV, maxDeviceNum and device\n    objectInstanceArrayAV.push({ \"device\": device, \"offset\": deviceList[device].bacnet.offsetAV, \"instanceRange\": deviceList[device].bacnet.instanceRangeAV, \"maxdevNum\": deviceList[device].identity.maxDevNum });\n    // Build another array with offsetAV, instanceRangeBV, instanceRangeAV and device\n    objectInstanceArrayBV.push({ \"device\": device, \"offset\": deviceList[device].bacnet.offsetBV, \"instanceRange\": deviceList[device].bacnet.instanceRangeBV, \"maxdevNum\": deviceList[device].identity.maxDevNum });\n}\n\n// Check that offset and instanceRange don't overlap and that there is not any manual object in another device object instance range.\nobjectInstanceArrayAV.sort((a, b) => a.offset - b.offset);\nobjectInstanceArrayBV.sort((a, b) => a.offset - b.offset);\nfor (let i = 0; i < objectInstanceArrayAV.length - 1; i++) {\n    if (objectInstanceArrayAV[i].instanceRange != 0) {\n\n        if (objectInstanceArrayAV[i].offset + objectInstanceArrayAV[i].instanceRange * objectInstanceArrayAV[i].maxdevNum > objectInstanceArrayAV[i + 1].offset) {\n            node.error(\"Error Analog values BACnet objects of devices overlap\",\n                {\n                    errorType: \"deviceListOverlap\",\n                    device1: objectInstanceArrayAV[i].device,\n                    device2: objectInstanceArrayAV[i + 1].device,\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet objects instances overlap\" });\n            return null;\n        }\n\n    }\n    if (objectInstanceArrayBV[i].instanceRange != 0) {\n        if (objectInstanceArrayBV[i].offset + objectInstanceArrayBV[i].instanceRange * objectInstanceArrayBV[i].maxdevNum > objectInstanceArrayBV[i + 1].offset) {\n            node.error(\"Error Binary values BACnet objects of devices overlap\",\n                {\n                    errorType: \"deviceListOverlap\",\n                    device1: objectInstanceArrayBV[i].device,\n                    device2: objectInstanceArrayBV[i + 1].device,\n                });\n            node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet objects instances overlap\" });\n            return null;\n        }\n\n    }\n}\n\n////////////////////////////////////\n// Return if all checkings are clear\n///////////////////////////////////\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Configuration OK\" });\nflow.set('g_deviceList', deviceList)\n\nnode.send(deviceList);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "461c91ce371d8aad"
            ]
        ]
    },
    {
        "id": "461c91ce371d8aad",
        "type": "debug",
        "z": "43c112e68b3cf83c",
        "g": "52b3c397c3a6a0a7",
        "name": "device list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 60,
        "wires": []
    },
    {
        "id": "d46645deffc4a90d",
        "type": "inject",
        "z": "43c112e68b3cf83c",
        "g": "52b3c397c3a6a0a7",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 65,
        "y": 60,
        "wires": [
            [
                "1aca54035ae6404d"
            ]
        ],
        "l": false
    },
    {
        "id": "eb34331b679573e6",
        "type": "link in",
        "z": "43c112e68b3cf83c",
        "g": "a4b7105f53de911b",
        "name": "link in 2",
        "links": [
            "6b023c691ab3c88c"
        ],
        "x": 45,
        "y": 360,
        "wires": [
            [
                "9f54986fcb4e3b53"
            ]
        ]
    },
    {
        "id": "6b023c691ab3c88c",
        "type": "link out",
        "z": "43c112e68b3cf83c",
        "g": "ed2fd3d67146e795",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "eb34331b679573e6"
        ],
        "x": 535,
        "y": 160,
        "wires": []
    }
]