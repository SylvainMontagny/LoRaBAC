[
    {
        "id": "fdc4d05e7d77a1ac",
        "type": "subflow",
        "name": "Rest API Downlink (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 460,
                "y": 140,
                "wires": [
                    {
                        "id": "461bf082becc03d0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 140,
                "wires": [
                    {
                        "id": "5e71f1e070a6c7e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "461bf082becc03d0",
        "type": "function",
        "z": "fdc4d05e7d77a1ac",
        "g": "349d7dd2c0935a84",
        "name": "READ Downlink Objects",
        "func": "let device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\nconst debug = flow.get('$parent.g_debug');\n\n\nswitch (device.controller.model) {\n\n    ///////////////////////////////////////////////////////////\n    ////// Distech Controls Eclypse APEX\n    ////// https://www.postman.com/distech/distech-ecy-v2-public/request/rsns661/read-property-multiple\n    ///////////////////////////////////////////////////////////\n    case \"distechControlsV2\":\n        /********** HTTP Request Read Multiple Properties \n        {\n            \"method\": \"POST\",\n            \"url\": url,\n            \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                          ContentType: \"application/json\"}\n            \"payload\": {\n                \"encode\": \"text\",\n                \"property-references\": [\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": 1,\n                      \"property\": \"presentValue\"\n                    },\n                    {\n                      \"type\": \"analogValue\",\n                      \"instance\": 4,\n                      \"property\": \"presentValue\"\n                    },\n                    ...\n                ]\n            },\n            \"requestTimeout\" : xxx (ms)\n        }\n        */\n\n        let property_references = [];\n\n        debug(device, \"down\", `${device.identity.deviceName} (RestAPI) : Read Downlink Objects`);\n\n        for (let object in bacnetObjects) {\n            if (bacnetObjects[object].dataDirection == \"downlink\") {\n                let temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\" }';\n                property_references.push(JSON.parse(temp));\n            }\n        }\n\n        // Return HTTP Request\n        return {\n            \"method\": \"POST\",\n            \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/read-property-multiple\",\n            \"headers\": {\n                Authorization: device.controller.httpAuthentication,\n                ContentType: \"application/json\"\n            },\n            \"payload\": {\n                \"encode\": \"text\",\n                \"property-references\": property_references\n            },\n            \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n            \"device\": device,\n        }\n\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "7a42afcfb8a685d2"
            ]
        ]
    },
    {
        "id": "7a42afcfb8a685d2",
        "type": "http request",
        "z": "fdc4d05e7d77a1ac",
        "g": "349d7dd2c0935a84",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "5e71f1e070a6c7e9"
            ]
        ]
    },
    {
        "id": "5e71f1e070a6c7e9",
        "type": "function",
        "z": "fdc4d05e7d77a1ac",
        "g": "349d7dd2c0935a84",
        "name": "Store Downlink object",
        "func": "/////////////////////////////////////////////////////////////////////\n/////////////////  Store Downlink Objects              //////////////\n/////////////////////////////////////////////////////////////////////\n/* This function stores the downlink data from the controller */\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\n// For InfluxDB support\ndevice.influxdb.source = \"downlink\";\n\nswitch (device.controller.model) {\n    case \"distechControlsV2\":\n        let donwlinkObjects = msg.payload;\n\n        for (let i = 0; i < donwlinkObjects.results.length; i++) {\n            Object.values(bacnetObjects).forEach(obj => {\n                if (donwlinkObjects.results[i].type == obj.objectType && donwlinkObjects.results[i].instance == obj.instanceNum) {\n                    if (obj.objectType == \"analogValue\") obj.value = Number(donwlinkObjects.results[i].value);\n                    if (obj.objectType == \"binaryValue\") obj.value = donwlinkObjects.results[i].value;\n                }\n            });\n        }\n\n        return {\n            device: device\n        };\n\n\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "349d7dd2c0935a84",
        "type": "group",
        "z": "fdc4d05e7d77a1ac",
        "name": "Read DOWNLINK BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "461bf082becc03d0",
            "7a42afcfb8a685d2",
            "5e71f1e070a6c7e9"
        ],
        "x": 514,
        "y": 99,
        "w": 732,
        "h": 82
    },
    {
        "id": "05aa49c69dd92539",
        "type": "subflow",
        "name": "Native BACnet Downlink (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 480,
                "y": 240,
                "wires": [
                    {
                        "id": "1c72187ab8d7c197"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 240,
                "wires": [
                    {
                        "id": "47383d3dcf732212",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1c72187ab8d7c197",
        "type": "function",
        "z": "05aa49c69dd92539",
        "g": "40f09968bdcb9909",
        "name": "Read Downlink Objects",
        "func": "let device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\nlet requestArray = [];\nconst debug = flow.get('$parent.g_debug');\n\ndebug(device, \"down\",`${device.identity.deviceName} (${device.controller.protocol}) : Read Downlink Objects`)\n\nfor ( let object in bacnetObjects){\n    if (bacnetObjects[object].dataDirection == \"downlink\"){\n        let temp = '{ \"objectId\": {\"type\": 2,\"instance\":' + bacnetObjects[object].instanceNum + '},\"properties\": [ {\"id\": 85} ] }';\n        requestArray.push(JSON.parse(temp));\n    }\n}\n\nreturn {\n    \"payload\": {\n        \"deviceIPAddress\": device.controller.ipAddress,\n        \"requestArray\": requestArray\n    },\n    \"device\" : device\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            [
                "a6df8b8ca067b95e"
            ]
        ]
    },
    {
        "id": "a6df8b8ca067b95e",
        "type": "BACnet-Read",
        "z": "05aa49c69dd92539",
        "g": "40f09968bdcb9909",
        "name": "",
        "objectType": "",
        "instance": "d73587a053000e72",
        "propertyId": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleRead": true,
        "x": 920,
        "y": 240,
        "wires": [
            [
                "47383d3dcf732212"
            ]
        ]
    },
    {
        "id": "47383d3dcf732212",
        "type": "function",
        "z": "05aa49c69dd92539",
        "g": "40f09968bdcb9909",
        "name": "Store Downlink Object",
        "func": "/////////////////////////////////////////////////////////////////////\n/////////////////  Store Downlink Objects              //////////////\n/////////////////////////////////////////////////////////////////////\n/* This function stores the downlink data from the controller */\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\nlet donwlinkObjects = msg.payload.values;\n\nfor (let i = 0; i < donwlinkObjects.length; i++) {\n    Object.values(bacnetObjects).forEach(obj => {\n        if (donwlinkObjects[i].objectId.type == obj.objectType && donwlinkObjects[i].objectId.instance == obj.instanceNum) {\n            obj.value = donwlinkObjects[i].values[0].value[0].value;\n\n        }\n    });\n}\n\nreturn {\n    \"device\": device\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "40f09968bdcb9909",
        "type": "group",
        "z": "05aa49c69dd92539",
        "name": "Read DOWNLINK BACnet Objects",
        "style": {
            "stroke": "#ff3f3f",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "1c72187ab8d7c197",
            "a6df8b8ca067b95e",
            "47383d3dcf732212"
        ],
        "x": 534,
        "y": 199,
        "w": 752,
        "h": 82
    },
    {
        "id": "4d0f0c0771ab4500",
        "type": "subflow",
        "name": "Rest API Uplink (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 300,
                "y": 360,
                "wires": [
                    {
                        "id": "0f12d8169e956e8a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 460,
                "wires": [
                    {
                        "id": "f7f1301c75c39d11",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f7f1301c75c39d11",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "name": "BACnet Object Exist ?",
        "func": "let device = msg.device;\nconst debug = flow.get(\"$parent.g_debug\");\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Stops here OR continue to read Downlink Objects. \n    // Case 200 : \"Object does not exist\" > Create Objects\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"Unknown Object\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} : Some BACnet objects don't exist`);\n            return [{ device: device }, null];       // Create Downlink Objects\n        }\n        else {\n            debug(device, \"up\", `${device.identity.deviceName} (RestAPI) : Write Uplink Objects`);\n            const dataDirection = Object.values(device.bacnet.objects).map(obj => obj.dataDirection);\n\n            if (dataDirection.some(direction => { return direction === \"downlink\" })) {\n                return [null, { device: device }];    // Continue to read downlink Objects\n            }\n            else {\n                debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n                return [null, null];                 // Stops here\n            }\n        }\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        if (msg.payload.includes(\"write-access-denied\")) {\n            node.error(\"Error : Trying to write a Read Only object (analogInput)\");\n        }\n        return [null, null];\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        return [null, null];\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        return [null, null];\n\n    case 404:\n        node.error(\"Error : 404\");\n        return [null, null];\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        return [null, null];\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        return [null, null];\n\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "2ea60b064ee5fd3e"
            ],
            []
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "ce546944050fc09d",
        "type": "http request",
        "z": "4d0f0c0771ab4500",
        "g": "9b9ee65b4f88d4a8",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "f7f1301c75c39d11"
            ]
        ]
    },
    {
        "id": "0f12d8169e956e8a",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "g": "9b9ee65b4f88d4a8",
        "name": "WRITE Uplink Objects",
        "func": "\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\nif(device.controller.protocol != \"restAPIBacnet\") return null;\n\nswitch (device.controller.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n    /********* HTTP Request Write Properties\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://@IP/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n        \"headers\": {Authorization: httpAuthentication,\n                  ContentType: \"application/json\"},\n        \n        \"payload\": {\n            \"encode\": \"text\",\n            \"property-references\": [\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                {\n                  \"type\": \"analogValue\",\n                  \"instance\": y,\n                  \"property\": \"presentValue\",\n                  \"value\" : \"xx\"\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n    let property_references = [];\n    for (let object in bacnetObjects) {\n      if (bacnetObjects[object].dataDirection == \"uplink\") {\n        let temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n        property_references.push(JSON.parse(temp));\n      }\n    }\n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n      \"headers\": {\n        Authorization: device.controller.httpAuthentication,\n        ContentType: \"application/json\"\n      },\n      \"payload\": {\n        \"encode\": \"text\",\n        \"property-references\": property_references\n      },\n      \"requestTimeout\": global.get('g_httpRequestTimeOut'),\n      \"device\": device\n    }\n\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "ce546944050fc09d"
            ]
        ]
    },
    {
        "id": "2ea60b064ee5fd3e",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "CREATE Objects",
        "func": "\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n  ///////////////////////////////////////////////////////////\n  ////// Distech Controls Eclypse APEX\n  ////// https://www.postman.com/distech/distech-ecy-v2-public/request/57jbx8w/create-objects-multiple\n  ///////////////////////////////////////////////////////////\n  case \"distechControlsV2\":\n\n    /**********  Objects creation on the controller\n    {\n        \"method\": \"POST\",\n        \"url\": \"https://\" + flow.get('$parent.g_controllerIP') +\"/api/rest/v2/batch\",\n        \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                  ContentType: \"application/json\"}\n        \"payload\":{\n            \"requests\": [\n                {\n                  \"id\": \"1\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"AnalogValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiAVTest10\"\n                  }\n                },\n                {\n                  \"id\": \"2\",\n                  \"method\": \"POST\",\n                  \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\",\n                  \"body\": {\n                    \"object-type\": \"BinaryValue\",\n                    \"instance-number\": 10010,\n                    \"name\": \"apiBVTest10\"\n                  }\n                },\n                ...\n            ]\n        },\n        \"requestTimeout\" : xxx (ms)\n    }\n    */\n\n\n    let requests = [], i = 1;\n\n    for (let object in bacnetObjects) {\n      let temp = '{ \"id\": \"' + (i++) + '\", \"method\": \"POST\", \"url\": \"/api/rest/v2/services/bacnet/local/objects/add\", \"body\": { \"object-type\": \"' + bacnetObjects[object].objectType + '\", \"instance-number\": ' + bacnetObjects[object].instanceNum + ', \"name\": \"' + bacnetObjects[object].objectName + '\" } }';\n      requests.push(JSON.parse(temp));\n    }\n\n    // Return HTTP Request\n    return {\n      \"method\": \"POST\",\n      \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/batch\",\n      \"headers\": {\n        Authorization: device.controller.httpAuthentication,\n        ContentType: \"application/json\"\n      },\n      \"payload\": { \"requests\": requests },\n      \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n      \"device\": device\n    }\n\n  ///////////////////////////////////////////////////////////\n  ////// XXXXX Controller\n  ////// URL to the API documentation\n  ///////////////////////////////////////////////////////////\n  case \"anotherController\":\n\n  \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 260,
        "wires": [
            [
                "66bac6f6d3ef486f"
            ]
        ]
    },
    {
        "id": "66bac6f6d3ef486f",
        "type": "http request",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 260,
        "wires": [
            [
                "2d70ba55e9d6dbc8",
                "f8147aafe51f87df"
            ]
        ]
    },
    {
        "id": "2d70ba55e9d6dbc8",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "WRITE Objects",
        "func": "\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\n\nswitch (device.controller.model) {\n\n    ///////////////////////////////////////////////////////////\n    ////// Distech Controls Eclypse APEX\n    ////// https://www.postman.com/distech/distech-ecy-v2-public/request/3qk28wy/write-property-multiple\n    ///////////////////////////////////////////////////////////\n    case \"distechControlsV2\":\n        let property_references = [];\n\n        for (let object in bacnetObjects) {\n            let temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\", \"value\": ' + bacnetObjects[object].value + ' }';\n            property_references.push(JSON.parse(temp));\n        }\n\n        // Return HTTP Request\n        return {\n            \"method\": \"POST\",\n            \"url\": \"https://\" + device.controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/write-property-multiple\",\n            \"headers\": {\n                Authorization: device.controller.httpAuthentication,\n                ContentType: \"application/json\"\n            },\n            \"payload\": {\n                \"encode\": \"text\",\n                \"property-references\": property_references\n            },\n            \"requestTimeout\": flow.get('$parent.g_httpRequestTimeOut'),\n            \"device\": device\n        }\n\n\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "ba52022330bc5460"
            ]
        ]
    },
    {
        "id": "ba52022330bc5460",
        "type": "http request",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 320,
        "wires": [
            [
                "89ccb3dd49118281"
            ]
        ]
    },
    {
        "id": "f8147aafe51f87df",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "Creation results",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\nswitch (msg.statusCode) {\n    //////////////////////////////////////////////////    \n    // Case 200 : \"Success\" > Objects have been created\n    //////////////////////////////////////////////////\n    case 200:\n        if (msg.payload.includes(\"\\\"status\\\":200\")) {\n            debug(device, \"creation\", `${device.identity.deviceName} (RestAPI) : Some BACnet objects have been created`);\n        }\n        if (msg.payload.includes(\"Instance already exists\") || msg.payload.includes(\"Object with same name already exists\")) {\n            global.set('g_errorObjectCreation', flow.get('$parent.g_errorObjectCreation') + 1);\n            node.error(`${device.identity.deviceName} : Some BACnet objects already existed`);\n        }\n        break;\n\n    case 400:\n        node.error(\"Error : Bad HTTP Request\");\n        break;\n\n    case 401:\n        node.error(\"Error : Can't connect to controller : Authorization error\");\n        break;\n\n    case 500:\n        node.error(\"Error : Server Error 500\");\n        break;\n\n    case 404:\n        node.error(\"Error : 404\");\n        break;\n\n\n    case \"ETIMEDOUT\":\n        node.error(\"Error : Can't connect to controller : TimeOut\");\n        break;\n\n    case \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\":\n        node.error(\"Error : You forgot to enable the TLS config in your HTTP node\");\n        break;\n\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Le code ajouté ici sera exécuté une fois\n// à chaque démarrage du noeud.\nglobal.set('g_errorObjectCreation', 0);",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "89ccb3dd49118281",
        "type": "function",
        "z": "4d0f0c0771ab4500",
        "g": "885bfde15373d132",
        "name": "Debug Write",
        "func": "let device = msg.device;\nconst debug = flow.get('$parent.g_debug');\n\ndebug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9b9ee65b4f88d4a8",
        "type": "group",
        "z": "4d0f0c0771ab4500",
        "name": "Write UPLINK BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ce546944050fc09d",
            "0f12d8169e956e8a"
        ],
        "x": 394,
        "y": 319,
        "w": 492,
        "h": 82
    },
    {
        "id": "885bfde15373d132",
        "type": "group",
        "z": "4d0f0c0771ab4500",
        "name": "Create missing BACnet Objects",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2ea60b064ee5fd3e",
            "66bac6f6d3ef486f",
            "2d70ba55e9d6dbc8",
            "ba52022330bc5460",
            "f8147aafe51f87df",
            "89ccb3dd49118281"
        ],
        "x": 1154,
        "y": 219,
        "w": 732,
        "h": 142
    },
    {
        "id": "38c4db63982e52db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9f44ee221cb42d7e",
        "type": "subflow",
        "name": "Native BACnet Uplink (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 380,
                "y": 240,
                "wires": [
                    {
                        "id": "dc26462b84a6a3e1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 240,
                "wires": [
                    {
                        "id": "5fdc8e1e8ee5de8e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7541f41d6484f72d",
        "type": "BACnet-Write",
        "z": "9f44ee221cb42d7e",
        "g": "05e37569031775e2",
        "name": "",
        "objectType": "0",
        "instance": "d73587a053000e72",
        "valueTag": "0",
        "valueValue": "",
        "propertyId": "0",
        "priority": "",
        "device": "a0609a711569d7f5",
        "server": "e0bf099a.ee8468",
        "multipleWrite": false,
        "x": 780,
        "y": 240,
        "wires": [
            [
                "5fdc8e1e8ee5de8e"
            ]
        ]
    },
    {
        "id": "dc26462b84a6a3e1",
        "type": "function",
        "z": "9f44ee221cb42d7e",
        "g": "05e37569031775e2",
        "name": "WRITE Uplink Objects",
        "func": "\nlet device = msg.device;\n\nif(device.controller.protocol != \"bacnet\") return null;\n\nlet bacnetObject = device.bacnet.objects[device.bacnet.uplinkKeys[0]];\n\nconst writeProperty = JSON.parse('{\"deviceIPAddress\":\"' + device.controller.ipAddress + '\", \"objectId\": { \"type\":' + bacnetObject.objectType + ', \"instance\":' + bacnetObject.instanceNum + '}, \"propertyId\": 85, \"values\": [ { \"type\":' + ((bacnetObject.objectType==2)?4:0) +', \"value\":' + bacnetObject.value +  '} ]}');\n\nreturn {\n    \"payload\" : writeProperty,\n    \"device\" : device\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "7541f41d6484f72d"
            ]
        ]
    },
    {
        "id": "5fdc8e1e8ee5de8e",
        "type": "function",
        "z": "9f44ee221cb42d7e",
        "g": "05e37569031775e2",
        "name": "loop",
        "func": "let device = msg.device;\ndevice.bacnet.uplinkKeys.shift();\nconst debug = flow.get('$parentg_debug');\n\n\nif (device.bacnet.uplinkKeys.length != 0) return [null, { \"device\": device }];\nelse {\n    debug(device, \"up\",`${device.identity.deviceName} (${device.controller.protocol}) : Write Uplink Objects`)\n    return [{ \"device\": device }, null];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 240,
        "wires": [
            [],
            [
                "dc26462b84a6a3e1"
            ]
        ]
    },
    {
        "id": "05e37569031775e2",
        "type": "group",
        "z": "9f44ee221cb42d7e",
        "name": "Write ULINK BACnet Objects",
        "style": {
            "label": true,
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "color": "#000000"
        },
        "nodes": [
            "7541f41d6484f72d",
            "dc26462b84a6a3e1",
            "5fdc8e1e8ee5de8e"
        ],
        "x": 434,
        "y": 199,
        "w": 592,
        "h": 82
    },
    {
        "id": "d73587a053000e72",
        "type": "BACnet-Instance",
        "name": "void_instance",
        "instanceAddress": "0"
    },
    {
        "id": "a0609a711569d7f5",
        "type": "BACnet-Device",
        "name": "void_device",
        "deviceAddress": ""
    },
    {
        "id": "e0bf099a.ee8468",
        "type": "BACnet-Client",
        "name": "Local",
        "adpuTimeout": "2000",
        "port": "47808",
        "interface": "127.0.0.1",
        "broadcastAddress": "255.255.255.255"
    },
    {
        "id": "5cc5759c4e59a5b9",
        "type": "tab",
        "label": "LoRaBAC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61078575c808c2ab",
        "type": "group",
        "z": "5cc5759c4e59a5b9",
        "name": "MQTT (to Configure)",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "babcc47d85abbf84",
            "9dbacfa1a1de2baa"
        ],
        "x": 14,
        "y": 439,
        "w": 552,
        "h": 250
    },
    {
        "id": "eae04ae15ef25baa",
        "type": "group",
        "z": "5cc5759c4e59a5b9",
        "name": "LoRaBAC Configuration",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e7655d80beaf9d10",
            "b6b88e2c28e6e9c4",
            "b7ee5df76794c467"
        ],
        "x": 614,
        "y": 19,
        "w": 492,
        "h": 82
    },
    {
        "id": "c6037680669e54a9",
        "type": "group",
        "z": "5cc5759c4e59a5b9",
        "name": "MQTT (to Configure)",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a559a39cd7574fab"
        ],
        "x": 1774,
        "y": 239,
        "w": 212,
        "h": 82
    },
    {
        "id": "d39199becfb613a9",
        "type": "group",
        "z": "5cc5759c4e59a5b9",
        "name": "Uplink",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#e3f3d3"
        },
        "nodes": [
            "acc7823ecaebfe88",
            "81154890f2e51b22",
            "55a952dc1c25cdd0"
        ],
        "x": 574,
        "y": 179,
        "w": 252,
        "h": 222
    },
    {
        "id": "cf0f4185b7b366fc",
        "type": "group",
        "z": "5cc5759c4e59a5b9",
        "name": "Downlink",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "20b0f415e9930935",
            "a5401e06829c3a0b",
            "38c1f757a9590ea9",
            "4d6a9b87671179b0",
            "abf4f05b2ce3bb15",
            "3b6a508a2d151aae",
            "38dc8c62dcc76251",
            "02228be706349069"
        ],
        "x": 874,
        "y": 179,
        "w": 872,
        "h": 222
    },
    {
        "id": "e49c2787445a9854",
        "type": "debug",
        "z": "5cc5759c4e59a5b9",
        "name": "Debug \"device\" object",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "81373ddc3e3422b4",
        "type": "function",
        "z": "5cc5759c4e59a5b9",
        "name": "Create Device Object",
        "func": "let deviceList = flow.get('g_deviceList');\nlet networkServer;\nlet deviceName, deviceType, deviceNum, devEUI, topicDownlink;\nlet devicePayload = {};\nlet oldValues = flow.get(\"g_oldValues\");\n\nlet topicUp = msg.topic;\n\n// Guess the NetworkServer from the received frame\nif (msg.payload.hasOwnProperty('deviceInfo'))       networkServer = \"chirpstack\";\nif (msg.payload.hasOwnProperty('end_device_ids'))   networkServer = \"tts\";\nif (msg.payload.hasOwnProperty('DevEUI_uplink'))    networkServer = \"actility\";\n\n// Reject messages from Actility :\nif ( 'DevEUI_notification' in msg.payload || 'DevEUI_notification' in msg.payload)  return null;\nif ( 'DevEUI_downlink_Rejected' in msg.payload) {\n    node.error(\"Actility : Downlink Message Rejected\");\n    return null;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"tts\") {\n    deviceName = msg.payload.end_device_ids.device_id;\n    topicDownlink = topicUp.replace(flow.get('g_tts_topicUplinkSuffix'), \"\") + flow.get('g_tts_topicDownlinkSuffix');\n    devEUI = msg.payload.end_device_ids.dev_eui;\n    if (!Object.keys(msg.payload.uplink_message).some(element => element == \"decoded_payload\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.uplink_message.decoded_payload;\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// Chirpstack Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"chirpstack\") {\n    if (msg.payload.fPort == 0) return 0;\n    deviceName = msg.payload.deviceInfo.deviceName;\n    topicDownlink = topicUp.replace(flow.get('g_chirp_topicUplinkSuffix'), \"\") + flow.get('g_chirp_topicDownlinkSuffix');\n    devEUI = msg.payload.deviceInfo.devEui;\n    if (!Object.keys(msg.payload).some(element => element == \"object\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.object;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\n\nif (networkServer == \"actility\") {\n    deviceName = msg.payload.DevEUI_uplink.CustomerData.name;\n    topicDownlink = topicUp.replace(flow.get('g_actility_topicUplinkSuffix'), \"\") + flow.get('g_actility_topicDownlinkSuffix');\n    devEUI = msg.payload.DevEUI_uplink.DevEUI;\n    if (!Object.keys(msg.payload.DevEUI_uplink).some(element => element == \"payload\")) {\n        node.error(deviceName + \" : No payload decoder configured on the Network Server\");\n        return null;\n    }\n    devicePayload = msg.payload.DevEUI_uplink.payload;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Checks\n/////////////////////////////////////////////////////////////////////////\nconst match = deviceName.match(/^(.*)-(\\d+)$/);\nif (match) {\n    deviceType = match[1];  // The part before the last dash\n    deviceNum = parseInt(match[2], 10);  // The number at the end, converted to an integer\n}\nelse {\n    node.error(`${deviceName} : this device Name doesn't respect \"xxx-num\" format`);\n    return null;\n}\n\nif ((deviceNum == 0)) {\n    node.error(`${deviceName} : Device Num is 0 is not allowed`);\n    return null;\n}\n\nif (deviceList[deviceType] == undefined) {\n    node.error(`${deviceType} : this Device Type doesn't belong to the Device List`);\n    return null;\n}\n\n// Check deviceNum overflow\nif (deviceNum > deviceList[deviceType].identity.maxDeviceNum) {\n    node.error(`Device \"${deviceName}\" instances overlaps another device : Dropped`);\n    return null;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Create a copy of the \"deviceType\" object of the \"deviceList\" structure\n/////////////////////////////////////////////////////////////////////////\nlet device = JSON.parse(JSON.stringify(deviceList[deviceType]));\n\ndevice.identity.deviceName = deviceName;\ndevice.identity.deviceType = deviceType;\ndevice.identity.deviceNum = deviceNum;\ndevice.identity.devEUI = devEUI;\ndevice.mqtt.topicDownlink = topicDownlink;\n\nfor (let object in device.bacnet.objects) {\n    // Update instanceNum\n    switch (device.bacnet.objects[object].assignementMode) {\n        case \"manual\":\n            \n            break;\n        case \"auto\":\n            switch (device.bacnet.objects[object].objectType) {\n                case \"analogValue\":\n                    device.bacnet.objects[object].instanceNum += device.bacnet.offsetAV + (device.bacnet.instanceRangeAV * deviceNum);\n                    break;\n                case \"binaryValue\":\n                    device.bacnet.objects[object].instanceNum += device.bacnet.offsetBV + (device.bacnet.instanceRangeBV * deviceNum);\n                    break;\n                default:\n                    node.error(\"Object type of \" + object + \" is unknown : \" + device.bacnet.objects[object].objectType);\n                    return null;\n                    \n            }\n            break;\n        default:\n            \n    }\n\n    // Update objectName\n    device.bacnet.objects[object].objectName = deviceName + '-' + object + '-' + device.bacnet.objects[object].instanceNum;\n    // Update value\n    if (device.bacnet.objects[object].dataDirection == \"uplink\") {\n        let lorawanPayloadName = device.bacnet.objects[object].lorawanPayloadName;\n        let keys = lorawanPayloadName.split(/[\\.\\[\\]]/).filter(key => key !== \"\");\n        let value = keys.reduce((accumulator, currentValue) => accumulator[currentValue], devicePayload);\n        device.bacnet.objects[object].value = value;\n    }\n    // Check value\n    if (device.bacnet.objects[object].value == undefined || typeof device.bacnet.objects[object].value == \"object\") {\n        node.error(`Device : ${device.identity.deviceName} - Object : ${object} - Wrong Payload decoder or Wrong Device description`);\n        return null;\n    }\n\n    if (device.controller.protocol == \"bacnet\") {\n        // \"restAPIBacnet\" and \"bacnet\" compatibility \n        switch (device.bacnet.objects[object].objectType) {\n            case \"analogValue\": device.bacnet.objects[object].objectType = 2; break;\n            case \"binaryValue\": device.bacnet.objects[object].objectType = 5; break;\n        }\n        // Keep only uplink payload in a new object\n        device.bacnet.uplinkKeys = Object.entries(device.bacnet.objects)\n            .filter(([key, obj]) => obj.dataDirection === \"uplink\")\n            .map(([key, obj]) => key);\n    }\n}\n\n// For debug\ndevice.transmitTime = Date.now();\n\n// For InfluxDB support\ndevice.influxdb = {\n    \"source\": \"uplink\"\n};\n\n// To save old values\nif (!oldValues.hasOwnProperty(device.identity.deviceName)){\n    for (let objet in device.bacnet.objects) {\n        if (device.bacnet.objects[objet].dataDirection === \"downlink\") {\n            oldValues[device.identity.deviceName] = JSON.parse(\"{\\\"\" + objet+ \"\\\": \" + JSON.stringify(device.bacnet.objects[objet])+\"}\");\n        }\n    }\n    \n}\nflow.set(\"g_oldValues\", oldValues);\n\nreturn {\n    \"device\": device\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "e49c2787445a9854",
                "acc7823ecaebfe88",
                "55a952dc1c25cdd0",
                "81154890f2e51b22"
            ]
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "babcc47d85abbf84",
        "type": "mqtt in",
        "z": "5cc5759c4e59a5b9",
        "g": "61078575c808c2ab",
        "name": "MQTT Subscriber",
        "topic": "mqtt/things/05ABCF180080E115/uplink",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e661bbb88417f040",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 480,
        "wires": [
            [
                "81373ddc3e3422b4"
            ]
        ]
    },
    {
        "id": "9dbacfa1a1de2baa",
        "type": "comment",
        "z": "5cc5759c4e59a5b9",
        "g": "61078575c808c2ab",
        "name": "MQTT Subscriber :\\n 1. Topic for TTN : v3/{application_id}@ttn/devices/+/up \\n 2. Topic for TTS : v3/{application_id}/devices/+/up \\n 3. Topic for ChirpStackV4 :  application/{application_id}/device/+/event/up \\n 4. Topic for Actility : See documentation.",
        "info": "1. Topic for TTN : v3/{application_id}@ttn/devices/+/up\nReplace {application_id} by your application id in TTN. /!\\ don't forget @ttn\n\n2. Topic for TTS : v3/{application_id}/devices/+/up\nReplace {application_id} by your application id in TTN.\n\n3. Topic for ChirpStackV4 :  application/{application_id}/device/+/event/up\nReplace {application_id} by your application id (it's a number, not a name !).\n\n4. Topic for Actility : Documentation for using Actility  Broker : https://docs.thingpark.com/thingpark-x/latest/Connector/BROKER_MQTT/. \n- For actility-USMB Broker, univ-smb/devices/+/uplink\n- For HiveMQ Broker : mqtt/things/+/uplink",
        "x": 290,
        "y": 600,
        "wires": []
    },
    {
        "id": "e7655d80beaf9d10",
        "type": "inject",
        "z": "5cc5759c4e59a5b9",
        "g": "eae04ae15ef25baa",
        "name": "trigger auto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 675,
        "y": 60,
        "wires": [
            [
                "b6b88e2c28e6e9c4"
            ]
        ],
        "l": false
    },
    {
        "id": "b6b88e2c28e6e9c4",
        "type": "function",
        "z": "5cc5759c4e59a5b9",
        "g": "eae04ae15ef25baa",
        "name": "TO CONFIGURE ",
        "func": "/////////////////////////////////////////////////////\n////////////    TO CONFIGURE      ///////////////////\n/////////////////////////////////////////////////////\n\n// configuration.js files (on GitHub) provides   //\n// examples of deviceList configuration          //\n\nlet deviceList = {\n    \n\n       }\n\n/////////////////////////////////////////////////\n/////////////   DO NOT MODIFY ///////////////////\n/////////////////////////////////////////////////\n\nconst networkServerSupported = [\"tts\", \"chirpstack\", \"actility\"];\nconst protocolSupported = [\"restAPIBacnet\", \"bacnet\"];\n\n// Store flow variables\nflow.set('g_deviceList', deviceList)\nflow.set('g_httpRequestTimeOut', 5000);\nflow.set('g_tts_topicDownlinkSuffix', \"/down\");\nflow.set('g_tts_topicUplinkSuffix', \"/up\");\nflow.set('g_chirp_topicDownlinkSuffix', \"/command/down\");\nflow.set('g_chirp_topicUplinkSuffix', \"/event/up\");\nflow.set('g_actility_topicDownlinkSuffix', \"/downlink\");\nflow.set('g_actility_topicUplinkSuffix', \"/uplink\");\nflow.set(\"g_oldValues\", {});\n\n \n// Debug function\nconst debug = function (device, debugType, debugText) {\n    if (debugType == \"forceOn\") {\n        node.warn(debugText);\n    }\n    else if (device.controller.debug.some(element => element == \"all\" || element == debugType)) {\n        node.warn(debugText);\n    }\n    else {\n        return null;\n    }\n}\nflow.set(\"g_debug\", debug);\n\n// Controller HTTP Autentification key\nfor (let device in deviceList) {\n    const buffer = Buffer.from(deviceList[device].controller.login + ':' + deviceList[device].controller.password);\n    deviceList[device].controller.httpAuthentication = \"Basic \" + buffer.toString('base64');\n}\n\n////////////////////////////////\n// Check configuration settings\n////////////////////////////////\nlet objectInstanceArrayAV = [];\nlet objectInstanceArrayBV = [];\nlet maxDevNumAV, maxDevNumBV;\n\nfor (let device in deviceList) {\n    \n    // Add \"identity\" and \"mqtt\" properties\n    deviceList[device].mqtt = {};\n\n    // Check LoRaWAN Network Servers [\"tts\", \"chirpstack\", \"actility\"]\n    if (!networkServerSupported.some(element => element == deviceList[device].lorawan.networkServer)) {\n        node.error(\"For device '\" + device + \"' : Network Server unknown - Choose between 'chirpstack', 'tts' or 'actility'\");\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Network Server not supported\" });\n        return null;\n    }\n\n    // Check that bacnetObject size is 5\n    for (let object in deviceList[device].bacnet.objects) {\n\n        switch (deviceList[device].bacnet.objects[object].dataDirection) {\n            case \"uplink\":\n                if (Object.keys(deviceList[device].bacnet.objects[object]).length != 6) {\n                    node.error(`For device \"${device}\" : error in ${object}`);\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet object Size error\" });\n                    return null;\n                }\n                break;\n            case \"downlink\":\n                if (deviceList[device].bacnet.objects[object].hasOwnProperty(\"uplinkToCompareWith\") && Object.keys(deviceList[device].bacnet.objects[object]).length != 10){\n                    node.error(`For device \"${device}\" : error in ${object}`);\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet object Size error\" });\n                    return null;\n                } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"uplinkToCompareWith\") && Object.keys(deviceList[device].bacnet.objects[object]).length != 9 ) {\n                    node.error(`For device \"${device}\" : error in ${object}`);\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet object Size error\" });\n                    return null;\n                } else if (!deviceList[device].bacnet.objects[object].hasOwnProperty(\"uplinkToCompareWith\") && deviceList[device].bacnet.objects[object].downlinkStrategie === \"compareToUplinkValue\"){\n                    node.error(`For device \"${device}\" : error in ${object}`);\n                    node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet object has compareToUplinkValue strategie but not the uplinkToCompareWith property\" });\n                    return null;\n                }\n                break;\n            default:\n                \n        }\n        \n    }\n\n    // Check device.controller.protocol [\"restAPIBacnet\", \"bacnet\"]\n    if (!protocolSupported.some(element => element == deviceList[device].controller.protocol)) {\n        node.error(`For device \"${device}\" : Protocol unknown - Choose between 'restAPIBacnet' or 'bacnet'`);\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Network Server not supported\" });\n        return null;\n    }\n\n    // Check device.bacnet.instanceRange >= Number of BACnet object in the deviceList\n    let instanceRangeAV = 0, instanceRangeBV = 0;\n\n    for (let object in deviceList[device].bacnet.objects) {\n        switch (deviceList[device].bacnet.objects[object].objectType) {\n            case \"analogValue\":\n                if (deviceList[device].bacnet.objects[object].instanceNum >= deviceList[device].bacnet.instanceRangeAV && deviceList[device].bacnet.objects[object].assignementMode != \"manual\"){\n                node.error(`For device \"${device}\" : instanceNum too high for \"${object}\"`);\n                node.status({ fill: \"red\", shape: \"dot\", text: object + \" instanceNum too high\" });\n                return null;\n                }\n                instanceRangeAV++;\n                break;\n            case \"binaryValue\":\n                if (deviceList[device].bacnet.objects[object].instanceNum >= deviceList[device].bacnet.instanceRangeBV && deviceList[device].bacnet.objects[object].assignementMode != \"manual\"){\n                node.error(`For device \"${device}\" : instanceNum too high for \"${object}\"`);\n                node.status({ fill: \"red\", shape: \"dot\", text: object + \" instanceNum too high\" });\n                return null;\n                }\n                instanceRangeBV++;\n                break;\n            default:\n                \n        }\n        if(deviceList[device].bacnet.objects[object].instanceNum < 0){\n            node.error(`For device \"${device}\" : Negative instanceNum for \"${object}\"`);\n            node.status({ fill: \"red\", shape: \"dot\", text: object + \" negative instanceNum\" });\n            return null;\n        }\n    }\n    if (deviceList[device].bacnet.instanceRangeAV < instanceRangeAV) {\n        node.error(`For device \"${device}\" : instanceRange too small for Analog Value`);\n        node.status({ fill: \"red\", shape: \"dot\", text: \"instanceRange too small\" });\n        return null;\n    }\n    if (deviceList[device].bacnet.instanceRangeBV < instanceRangeBV) {\n        node.error(`For device \"${device}\" : instanceRange too small for Binary Value`);\n        node.status({ fill: \"red\", shape: \"dot\", text: \"instanceRange too small\" });\n        return null;\n    }\n\n    // Build an array with offsetAV, instanceRangeAV, maxDeviceNum and device\n    objectInstanceArrayAV.push({ \"device\" : device, \"offset\" : deviceList[device].bacnet.offsetAV, \"instanceRange\" : deviceList[device].bacnet.instanceRangeAV, \"maxdevNum\":deviceList[device].identity.maxDevNum });\n    // Build another array with offsetAV, instanceRangeBV, instanceRangeAV and device\n    objectInstanceArrayBV.push({ \"device\" : device, \"offset\" : deviceList[device].bacnet.offsetBV, \"instanceRange\" : deviceList[device].bacnet.instanceRangeBV, \"maxdevNum\":deviceList[device].identity.maxDevNum });\n}\n\n// Check that offset and instanceRange don't overlap.\nobjectInstanceArrayAV.sort((a, b) => a.offset - b.offset);\nobjectInstanceArrayBV.sort((a, b) => a.offset - b.offset);\nfor (let i = 0; i < objectInstanceArrayAV.length - 1; i++) {\n    if (objectInstanceArrayAV[i].instanceRange != 0){\n        if (objectInstanceArrayAV[i].offset + objectInstanceArrayAV[i].instanceRange * objectInstanceArrayAV[i].maxdevNum > objectInstanceArrayAV[i + 1].offset) {\n            node.error(`BACnet objects of Device \"${objectInstanceArrayAV[i].device}\" and \"${objectInstanceArrayAV[i + 1].device}\" overlap`)\n            node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet objects instances overlap\" });\n            return null;\n        }\n    }\n    if (objectInstanceArrayBV[i].instanceRange != 0){\n        if (objectInstanceArrayBV[i].offset + objectInstanceArrayBV[i].instanceRange * objectInstanceArrayAV[i].maxdevNum > objectInstanceArrayBV[i + 1].offset) {\n            node.error(`BACnet objects of Device \"${objectInstanceArrayBV[i].device}\" and \"${objectInstanceArrayBV[i + 1].device}\" overlap`)\n            node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet objects instances overlap\" });\n            return null;\n        }\n    }\n}\n\n////////////////////////////////////\n// Return if all checkings are clear\n///////////////////////////////////\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Configuration OK\" });\n\nreturn {\n    payload: deviceList\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 60,
        "wires": [
            [
                "b7ee5df76794c467"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "b7ee5df76794c467",
        "type": "debug",
        "z": "5cc5759c4e59a5b9",
        "g": "eae04ae15ef25baa",
        "name": "deviceList",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 60,
        "wires": []
    },
    {
        "id": "a559a39cd7574fab",
        "type": "mqtt out",
        "z": "5cc5759c4e59a5b9",
        "g": "c6037680669e54a9",
        "name": "MQTT Publisher",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f75024a426208b8a",
        "x": 1880,
        "y": 280,
        "wires": []
    },
    {
        "id": "acc7823ecaebfe88",
        "type": "subflow:9f44ee221cb42d7e",
        "z": "5cc5759c4e59a5b9",
        "g": "d39199becfb613a9",
        "name": "Native BACnet Uplink",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "4d6a9b87671179b0"
            ]
        ]
    },
    {
        "id": "81154890f2e51b22",
        "type": "subflow:4d0f0c0771ab4500",
        "z": "5cc5759c4e59a5b9",
        "g": "d39199becfb613a9",
        "name": "Rest API Uplink",
        "x": 680,
        "y": 220,
        "wires": [
            [
                "abf4f05b2ce3bb15"
            ]
        ]
    },
    {
        "id": "55a952dc1c25cdd0",
        "type": "link out",
        "z": "5cc5759c4e59a5b9",
        "g": "d39199becfb613a9",
        "name": "Write InfluxDB for uplink",
        "mode": "link",
        "links": [
            "bcdc082a09ace57d"
        ],
        "x": 625,
        "y": 300,
        "wires": []
    },
    {
        "id": "20b0f415e9930935",
        "type": "function",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Downlink Strategies",
        "func": "///////////////////////////////////////////////////////////\n////// This part is device dependant\n////// The configuration depends on the downlink strategy\n///////////////////////////////////////////////////////////\n\nlet device = msg.device;\nlet bacnetObjects = device.bacnet.objects;\nconst debug = flow.get(\"g_debug\");\nlet downlinkLowPriorityObject = 0;\nlet oldValues = flow.get(\"g_oldValues\")\nlet payload={};\n\nfunction parametres() {\n    switch (device.identity.deviceType) {\n    case \"usmb-valve\":\n        \n        break;\n    case \"micropelt-mlr003\":\n        //stringify the safetyMode and the userMode\n            switch (bacnetObjects[\"safetyMode\"].value) {\n                case \"active\":\n                    device.bacnet.objects[\"safetyMode\"].value = \"Ambient_Temperature\";\n                    break;\n                case \"inactive\":\n                    device.bacnet.objects[\"safetyMode\"].value = \"Valve_Position\";\n                    break;\n                default:\n                    node.error(\"Unknow safetyMode value : \" + bacnetObjects[\"safetyMode\"].value);\n            }\n            switch (bacnetObjects[\"userMode\"].value) {\n                case \"active\":\n                    device.bacnet.objects[\"userMode\"].value = \"Ambient_Temperature\";\n                    break;\n                case \"inactive\":\n                    device.bacnet.objects[\"userMode\"].value = \"Valve_Position\";\n                    break;\n                default:\n                    node.error(\"Unknow userMode value : \" + bacnetObjects[\"userMode\"].value);\n            }\n        break;\n\n    case \"mclimate-vicki\":\n        \n        break;\n\n    case \"milesight-wt101\":\n        \n        break;\n}\n}\n\nfor (let object in bacnetObjects) {\n\n    if (bacnetObjects[object].dataDirection === \"downlink\" && bacnetObjects[object].downlinkStrategie != \"noDownlink\") {\n        \n        switch (bacnetObjects[object].downlinkPortPriority) {\n            case \"high\":\n                switch (bacnetObjects[object].downlinkStrategie) {\n                    case \"noDownlink\":\n                        // No way to be here\n                        break;\n                    case \"onChangeOfValue\":\n                        if (bacnetObjects[object].value != oldValues[device.identity.deviceName][object].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Old value ${oldValues[device.identity.deviceName][object].value}  != ${object} ${bacnetObjects[object].value}`);\n                            parametres();\n                            //Creation of the downlink payload\n                            for (let obj in bacnetObjects){\n                                if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[object].downlinkPort){\n                                    let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";                        \n                                    payload = { ...payload, ...JSON.parse(temp) }\n                                }\n                            }\n                            msg ={\n                                \"payload\" : payload,\n                                \"device\" :device\n                            }\n                            msg.device.lorawan.downlinkPort = bacnetObjects[object].downlinkPort;\n                            return msg\n                        }\n                        break;\n                    case \"compareToUplinkValue\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n                            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[object].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value}  != ${object} ${bacnetObjects[object].value}`);\n                            parametres();\n                            //Creation of the downlink payload\n                            for (let obj in bacnetObjects){\n                                if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[object].downlinkPort){\n                                    let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";                        \n                                    payload = { ...payload, ...JSON.parse(temp) }\n                                }\n                            }\n                            msg ={\n                                \"payload\" : payload,\n                                \"device\" :device\n                            }\n                            msg.device.lorawan.downlinkPort = bacnetObjects[object].downlinkPort;\n                            return msg\n                        }\n                        break;\n                    default:\n                        \n                }\n                \n                break;\n            case \"low\":\n                //In case of low priority downlink the object name is kept till the end of the for loop \n                // to be sur that there is not any high priority downlink to send \n                switch (bacnetObjects[object].downlinkStrategie) {\n                    case \"noDownlink\":\n                        // No way to be here\n                        break;\n                    case \"onChangeOfValue\":\n                        if (bacnetObjects[object].value != oldValues[device.identity.deviceName][object].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    case \"compareToUplinkValue\":\n                        if (bacnetObjects[object].value != bacnetObjects[bacnetObjects[object].uplinkToCompareWith].value) {\n                            downlinkLowPriorityObject = object;\n                        }\n                        break;\n                    default:\n                        \n                }\n                break;\n            default:\n\n        }\n    }\n}\nif (downlinkLowPriorityObject != 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n    switch (bacnetObjects[downlinkLowPriorityObject].downlinkStrategie) {\n        case \"noDownlink\":\n            // No way to be here\n            break;\n        case \"onChangeOfValue\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : Old value ${oldValues[device.identity.deviceName][downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        case \"compareToUplinkValue\":\n            debug(device, \"down\", `${device.identity.deviceName} (${device.controller.protocol}) : Downlink scheduled : ${bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith} ${bacnetObjects[bacnetObjects[downlinkLowPriorityObject].uplinkToCompareWith].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);\n            break;\n        default:\n                        \n    }\n    parametres();\n    //Creation of the dowlink payload\n    for (let obj in bacnetObjects){\n        if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[downlinkLowPriorityObject].downlinkPort){\n            let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";\n            payload = { ...payload, ...JSON.parse(temp) }\n        }\n    }\n    msg ={\n        \"payload\" : payload,\n        \"device\" :device\n    }\n    msg.device.lorawan.downlinkPort = bacnetObjects[downlinkLowPriorityObject].downlinkPort;\n    return msg            \n}else{\n\n    node.status({fill: \"green\", shape: \"dot\" ,text: \"No downlink\"});\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 280,
        "wires": [
            [
                "a5401e06829c3a0b",
                "38dc8c62dcc76251",
                "02228be706349069"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "a5401e06829c3a0b",
        "type": "debug",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Debug strategie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 340,
        "wires": []
    },
    {
        "id": "38c1f757a9590ea9",
        "type": "debug",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Debug Downlink message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d6a9b87671179b0",
        "type": "subflow:05aa49c69dd92539",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Native BACnet Downlink",
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "20b0f415e9930935",
                "3b6a508a2d151aae"
            ]
        ]
    },
    {
        "id": "abf4f05b2ce3bb15",
        "type": "subflow:fdc4d05e7d77a1ac",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Rest API Downlink",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "20b0f415e9930935",
                "3b6a508a2d151aae"
            ]
        ]
    },
    {
        "id": "3b6a508a2d151aae",
        "type": "link out",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Write InfluxDB for downlink",
        "mode": "link",
        "links": [
            "bcdc082a09ace57d"
        ],
        "x": 955,
        "y": 300,
        "wires": []
    },
    {
        "id": "38dc8c62dcc76251",
        "type": "function",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Create Downlink Message",
        "func": "\n\nlet device = msg.device;\nlet downlinkJson = {};\nconst debug = flow.get('g_debug');\n\n// Modify the downlink object according to the lorawanPayloadName.\n\nfor (let object in msg.payload) {\n    // Don't do any changes if lorawanPayloadName is the same as the BACnet Object name.\n    if (!Object.keys(device.bacnet.objects).some(element => element == device.bacnet.objects[object].lorawanPayloadName)) {\n        msg.payload[device.bacnet.objects[object].lorawanPayloadName] = msg.payload[object];\n        delete msg.payload[object];\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"tts\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink + (device.lorawan.flushDownlinkQueue ? \"/replace\" : \"/push\"),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": device.lorawan.downlinkPort,\n                    \"decoded_payload\": msg.payload,\n                    \"priority\": \"NORMAL\"\n                },\n            ]\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n\n//////////////////////////////////////////////////////////////////////////\n// Chipstack Network Server \n/////////////////////////////////////////////////////////////////////////\n// 1. Flush the downlink Queue\n\nif (device.lorawan.networkServer == \"chirpstack\") {\n    if (device.lorawan.flushDownlinkQueue == true) {\n\n        //We include flow value from libraries\n        var grpc = flow.get('grpc');\n        var device_grpc = flow.get('device_grpc');\n        var device_pb = flow.get('device_pb');\n\n        // This must point to the ChirpStack API interface.\n        const server = \"chirpstack.univ-lorawan.fr:9090\";\n        // The DevEUI for which we want to enqueue the downlink.\n        const devEui = device.identity.devEUI;\n        \n        // The API token (can be obtained through the ChirpStack web-interface).\n        const apiToken = device.lorawan.chirpstack.grpcApikey;\n\n        // Create the client for the DeviceService.\n        const deviceService = new device_grpc.DeviceServiceClient(\n            server,\n            grpc.credentials.createInsecure(),\n        );\n\n        // Create the Metadata object.\n        const metadata = new grpc.Metadata();\n        metadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n        //Flush downlink queue request\n        const flushReq = new device_pb.FlushDeviceQueueRequest();\n        flushReq.setDevEui(devEui);\n\n        //Send the request\n        deviceService.flushQueue(flushReq, metadata, (err, resp) => {\n            if (err !== null) {\n                //node.error(`Can't flush ChirpStack downlink queue :  ${err}`);\n            }\n        });\n    }\n\n    // 2. Prepare downlink JSON\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"devEui\": device.identity.devEUI,\n            \"confirmed\": false,\n            \"fPort\": device.lorawan.downlinkPort,\n            \"object\": msg.payload\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n    return downlinkJson;\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"actility\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"DevEUI_downlink\": {\n                \"DevEUI\": device.identity.devEUI,\n                \"FPort\": device.lorawan.downlinkPort,\n                \"payload\": msg.payload,\n                \"FlushDownlinkQueue\": String(+device.lorawan.flushDownlinkQueue),\n                \"DriverCfg\": {\n                    \"app\": {\n                        \"pId\": device.lorawan.actility.driver.pId,\n                        \"mId\": device.lorawan.actility.driver.mId,\n                        \"ver\": device.lorawan.actility.driver.ver\n                    }\n                }\n            }\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 280,
        "wires": [
            [
                "a559a39cd7574fab",
                "38c1f757a9590ea9"
            ]
        ],
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "02228be706349069",
        "type": "function",
        "z": "5cc5759c4e59a5b9",
        "g": "cf0f4185b7b366fc",
        "name": "Update oldValues",
        "func": "let oldValues = flow.get(\"g_oldValues\");\nlet deviceName = msg.device.identity.deviceName;\n\nfor (let object in msg.payload) {\n    oldValues[deviceName][object].value =  msg.payload[object] ;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e661bbb88417f040",
        "type": "mqtt-broker",
        "name": "Actility",
        "broker": "df3cb6422c55431b93b8bb8fb76b9602.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "38c4db63982e52db",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f75024a426208b8a",
        "type": "mqtt-broker",
        "name": "Chirpstack-controller",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]