[
    {
        "id": "c48b6850274e56eb",
        "type": "group",
        "z": "d5185b34c44ae683",
        "name": "polling of class C devices's downlink bacnet objects",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7236d826894b4b5f",
            "860a414966bfaa39",
            "ac9bcd7370444592",
            "3bb590f1cf82155f",
            "1e8c1d5be9a7fb4b",
            "857ac9b66e081724",
            "322bfeaa66657067",
            "6c57a60f497c0abd",
            "11b737a512b17e56",
            "4ec71459aa9365ef"
        ],
        "x": 29.71428571428578,
        "y": 479,
        "w": 1207.7142857142858,
        "h": 182
    },
    {
        "id": "7236d826894b4b5f",
        "type": "function",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "READ Downlink Objects",
        "func": "let devices = RED.util.cloneMessage(flow.get(\"g_previousValues\"));\nlet client = new nodeBacnet()\nconst debug = flow.get('g_debug');\n\n// No action will be taken if the application doesn't know any devices\nif (devices === undefined){\n    return null ;\n}\n\nfor (let device in devices) {\n    if (devices[device].lorawan[\"class\"]?.toLowerCase() === \"c\"){  \n        let bacnetObjects = devices[device].bacnet.objects;\n        \n\n        switch (devices[device].controller.protocol) {\n            case \"bacnet\":\n                let requestArray = [];\n                let downlinkobject = {};\n                downlinkobject[\"result\"] = [];\n                // Build the request array\n                for (let object in bacnetObjects) {\n                  if (bacnetObjects[object].dataDirection === \"downlink\" && (bacnetObjects[object].downlinkStrategie === \"onChangeOfValue\" || bacnetObjects[object].downlinkStrategie === \"onChangeOfValueWithinRange\")) {\n                    let temp = JSON.parse('{\"objectId\": { \"type\":' + bacnetObjects[object].objectType + ', \"instance\":' + bacnetObjects[object].instanceNum + '},\"properties\": [ {\"id\": 85} ] }');\n                    requestArray.push(temp);\n                  }\n                }\n\n                // Use a Promise to manage the asynchronous function\n                return new Promise((resolve, reject) => {\n                  client.readPropertyMultiple('192.168.1.108', requestArray, (err, value) => {\n                    if (err) {\n                      node.error(err);\n                      node.status({ fill: \"red\", shape: \"dot\", text: \"BACnet \" + err });\n                      reject(err); // reject the promise in case of error\n                    } else if (value) {\n                      msg.payload = value;\n                      node.status({ fill: \"green\", shape: \"ring\", text: \"Native BACnet\" });\n                      resolve(msg); // resolve the promise with the node message\n                    }\n                  });\n                }).then((msg) => {\n                  // once the promise has been resolved\n                  let values = msg.payload.values || [];\n                  // store the values in the device objects value property\n                  for (let i = 0; i < values.length; i++) {\n                    downlinkobject.result[i][\"objectType\"] =  values[i].objectId.type;\n                    downlinkobject.result[i][\"instanceNum\"] =  values[i].objectId.instance;\n                    downlinkobject.result[i][\"value\"] =  values[i].values[0].value[0].value;\n\n                  }\n                  msg = {\n                    \"request\":{\n                                \"downlinkobject\" : downlinkobject,\n                                \"deviceName\": device,\n                                \"device\" : devices[device]\n                            }\n                  };\n                node.send(msg);\n                }).catch((err) => {\n                  node.status({ fill: \"red\", shape: \"dot\", text: err });\n                  node.error(\"Error reading bacnet objects\", {\n                    errorType: \"nativeBACnet\",\n                    error: err,\n                \n                  });\n                  return null;\n                });\n                break;\n            case \"restAPIBacnet\":\n                node.status({ fill: \"green\", shape: \"ring\", text: \"RestAPI BACnet\" });\n                switch (devices[device].controller.model){ \n                    ///////////////////////////////////////////////////////////\n                    ////// Distech Controls Eclypse APEX\n                    ////// https://www.postman.com/distech/distech-ecy-v2-public/request/rsns661/read-property-multiple\n                    ///////////////////////////////////////////////////////////\n                    case \"distechControlsV2\":\n                        /********** HTTP Request Read Multiple Properties \n                        {\n                            \"method\": \"POST\",\n                            \"url\": url,\n                            \"headers\": {Authorization: flow.get('$parent.g_httpAuthentication'),\n                                          ContentType: \"application/json\"}\n                            \"payload\": {\n                                \"encode\": \"text\",\n                                \"property-references\": [\n                                    {\n                                      \"type\": \"analogValue\",\n                                      \"instance\": 1,\n                                      \"property\": \"presentValue\"\n                                    },\n                                    {\n                                      \"type\": \"analogValue\",\n                                      \"instance\": 4,\n                                      \"property\": \"presentValue\"\n                                    },\n                                    ...\n                                ]\n                            },\n                            \"requestTimeout\" : xxx (ms)\n                        }\n                        */\n        \n                        let property_references = [];\n        \n                       // debug(devices[device], \"down\", `${device} (RestAPI) : Read Downlink Objects for class C`);\n                        for (let object in bacnetObjects) {\n                            // Only the object with the \"onChangeOfValue\" or the \"onChangeOfValueWithinRange\" downlink strategie are fetched\n                          if (bacnetObjects[object].dataDirection === \"downlink\" && (bacnetObjects[object].downlinkStrategie === \"onChangeOfValue\" || bacnetObjects[object].downlinkStrategie === \"onChangeOfValueWithinRange\")) {\n                                let temp = '{ \"type\": \"' + bacnetObjects[object].objectType + '\", \"instance\": ' + bacnetObjects[object].instanceNum + ', \"property\": \"presentValue\" }';\n                                property_references.push(JSON.parse(temp));\n                            }\n                        }\n        \n        \n                        // Return HTTP Request\n                        node.send({\n                            \"request\":{\n                                \"method\": \"POST\",\n                                \"url\": \"https://\" + devices[device].controller.ipAddress + \"/api/rest/v2/services/bacnet/local/objects/read-property-multiple\",\n                                \"headers\": {\n                                    Authorization: devices[device].controller.httpAuthentication,\n                                    ContentType: \"application/json\"\n                                },\n                                \"payload\": {\n                                    \"encode\": \"text\",\n                                    \"property-references\": property_references\n                                },\n                                \"requestTimeout\": flow.get('g_httpRequestTimeOut'),\n                                \"deviceName\": device,\n                                \"device\" : devices[device]\n                            }\n                        });\n        \n        \n                    ///////////////////////////////////////////////////////////\n                    ////// XXXXX Controller\n                    ////// URL to the API documentation\n                    ///////////////////////////////////////////////////////////\n                    case \"anotherController\":\n\n                        break;\n                    default:\n\n                }\n                break;\n            default:\n                        \n        }\n\n\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "nodeBacnet",
                "module": "node-bacnet"
            }
        ],
        "x": 250,
        "y": 560,
        "wires": [
            [
                "4ec71459aa9365ef"
            ]
        ]
    },
    {
        "id": "860a414966bfaa39",
        "type": "http request",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "HTTP REQUEST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "38c4db63982e52db",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 827.1428571428573,
        "y": 520,
        "wires": [
            [
                "322bfeaa66657067"
            ]
        ]
    },
    {
        "id": "ac9bcd7370444592",
        "type": "function",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "Check and prepare the downlink",
        "func": "/////////////////////////////////////////////////////////////////////\n/////////////////  Store Downlink Objects              //////////////\n/////////////////////////////////////////////////////////////////////\n/* This function stores the downlink data from the controller */\nconst previousValues = flow.get(\"g_previousValues\");\nconst deviceName = msg.deviceName;\nconst previousBacnetObject = previousValues[deviceName].bacnet.objects\nconst device = RED.util.cloneMessage(previousValues[deviceName]);\nif (device.lorawan.hasOwnProperty(\"defaultValuesForDownlink\")) {var staticDownlinkObjects = device.lorawan.defaultValuesForDownlink}\nlet bacnetObjects = RED.util.cloneMessage(device.bacnet.objects);\nconst debug = flow.get('g_debug');\nlet downlinkLowPriorityObject = 0;\nlet payload={};\n\nfunction downlinkPayloadCreation(downlinkObjectToSend) {\n    //Creation of the downlink payload\n    for (let obj in bacnetObjects) {\n        if (bacnetObjects[obj].dataDirection === \"downlink\" && bacnetObjects[obj].downlinkPort == bacnetObjects[downlinkObjectToSend].downlinkPort) {\n            let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(bacnetObjects[obj].value) + \" }\";\n            payload = { ...payload, ...JSON.parse(temp) }\n        }\n    }\n    // Chek if there are other values to add to the payload\n    if (device.lorawan.hasOwnProperty(\"defaultValuesForDownlink\")) {\n        if (device.lorawan.defaultValuesForDownlink.hasOwnProperty(\"fPort_\" + bacnetObjects[downlinkObjectToSend].downlinkPort)) {\n            for (let obj in staticDownlinkObjects[\"fPort_\" + bacnetObjects[downlinkObjectToSend].downlinkPort]) {\n                let temp = \"{ \\\"\" + obj + \"\\\" : \" + JSON.stringify(staticDownlinkObjects[\"fPort_\" + bacnetObjects[downlinkObjectToSend].downlinkPort][obj]) + \" }\";\n                payload = { ...payload, ...JSON.parse(temp) }\n\n            }\n        }\n    }\n    msg.device.lorawan.downlinkPort = bacnetObjects[downlinkObjectToSend].downlinkPort\n\n}\n\nswitch (device.controller.model) {\n    case \"distechControlsV2\":\n        let donwlinkObjects = msg.payload;\n\n        for (let i = 0; i < donwlinkObjects.results.length; i++) {\n            Object.values(bacnetObjects).forEach(obj => {\n                if (donwlinkObjects.results[i].type == obj.objectType && donwlinkObjects.results[i].instance == obj.instanceNum) {\n                    if (obj.objectType == \"analogValue\") obj.value = Number(donwlinkObjects.results[i].value);\n                    if (obj.objectType == \"binaryValue\") obj.value = donwlinkObjects.results[i].value;\n                }\n            });\n        }\n    ///////////////////////////////////////////////////////////\n    ////// XXXXX Controller\n    ////// URL to the API documentation\n    ///////////////////////////////////////////////////////////\n    case \"anotherController\":\n\n}\n///////////////////////////////////////////////////////////\n///////  This part check if a downlink is needed  /////////\n///////////////////////////////////////////////////////////\nfor (let object in bacnetObjects) {\n    if (bacnetObjects[object].dataDirection === \"downlink\" && (bacnetObjects[object].downlinkStrategie === \"onChangeOfThisValue\" || bacnetObjects[object].downlinkStrategie === \"onChangeOfThisValueWithinRange\")) {\n\n      switch (bacnetObjects[object].downlinkPortPriority) {\n          case \"high\":\n            switch (bacnetObjects[object].downlinkStrategie) {\n                case \"onChangeOfThisValue\":\n                    if (bacnetObjects[object].value != device.bacnet.objects[object].value) {\n                    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n                    debug(device, \"down\", `${deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${device.bacnet.objects[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                    //Creation of the dowlink payload\n                    downlinkPayloadCreation(object)\n                    }     \n                    break;\n                case \"onChangeOfThisValueWithinRange\":\n                    if (bacnetObjects[object].value != device.bacnet.objects[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n                    debug(device, \"down\", `${deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${device.bacnet.objects[object].value}  != ${object} ${bacnetObjects[object].value}`);\n                    //Creation of the dowlink payload\n                    downlinkPayloadCreation(object)\n                    }    \n                    break;\n                default:\n                    \n            }\n              \n              break;\n          case \"low\":\n              //In case of low priority downlink the object name is kept till the end of the for loop \n              // to be sure that there is not any high priority downlink to send \n              switch (bacnetObjects[object].downlinkStrategie) {\n                case \"onChangeOfThisValue\":\n                    if (bacnetObjects[object].value != device.bacnet.objects[object].value) {\n                        downlinkLowPriorityObject = object;\n                    }\n                    break;\n                case \"onChangeOfThisValueWithinRange\":\n                    if (bacnetObjects[object].value != device.bacnet.objects[object].value && bacnetObjects[object].value <= bacnetObjects[object].range[1] && bacnetObjects[object].value >= bacnetObjects[object].range[0]) {\n                        downlinkLowPriorityObject = object;\n                    }\n                    break;\n                default:\n                    \n              }\n              break;\n          default:\n\n      }\n    }\n if (Object.keys(payload).length !== 0){\n        break;\n    }\n}\nif (downlinkLowPriorityObject != 0 && Object.keys(payload).length === 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Downlink\" });\n    debug(device, \"down\", `${deviceName} (${device.controller.protocol}) : Downlink scheduled : Previous value ${device.bacnet.objects[downlinkLowPriorityObject].value}  != ${downlinkLowPriorityObject} ${bacnetObjects[downlinkLowPriorityObject].value}`);     \n  \n    //Creation of the dowlink payload\n    downlinkPayloadCreation(downlinkLowPriorityObject)           \n}else if (Object.keys(payload).length == 0){\n\n    node.status({fill: \"green\", shape: \"dot\" ,text: \"No downlink\"});\n    return null;\n}\n\n//Update the previous values\n\nfor (let object in payload) {\n    previousBacnetObject[object].value = payload[object] ;\n}\n\n\n//Create the downlink payload\nlet downlinkJson = {};\n// Modify the downlink object according to the lorawanPayloadName.\n\nfor (let object in payload) {\n    // Don't do any changes if lorawanPayloadName is the same as the BACnet Object name.\n    if (!Object.keys(device.bacnet.objects).some(element => element == device.bacnet.objects[object].lorawanPayloadName)) {\n        payload[device.bacnet.objects[object].lorawanPayloadName] = payload[object];\n        delete payload[object];\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// The Things Stack Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"tts\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink + (device.lorawan.flushDownlinkQueue ? \"/replace\" : \"/push\"),\n        \"payload\": {\n            \"downlinks\": [\n                {\n                    \"f_port\": device.lorawan.downlinkPort,\n                    \"decoded_payload\": payload,\n                    \"priority\": \"NORMAL\"\n                },\n            ]\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n/*\n//////////////////////////////////////////////////////////////////////////\n// helium Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"helium\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"payload_raw\": \"SGVsbG8sIHdvcmxkIQ==\",\n            \"port\": device.lorawan.downlinkPort,\n            \"confirmed\": false\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n*/\n//////////////////////////////////////////////////////////////////////////\n// Chipstack Network Server \n/////////////////////////////////////////////////////////////////////////\n// 1. Flush the downlink Queue\n\nif (device.lorawan.networkServer == \"chirpstack\") {\n    if (device.lorawan.flushDownlinkQueue == true) {\n        debug(device, \"downlink\", device.identity.deviceName + \" flush downlink queue\");\n        //We include flow value from libraries\n        var grpc = grpcJs;\n        var device_grpc = chirpstack_device_grpc;\n        var device_pb = chirpstack_device_pb;\n\n        // This must point to the ChirpStack API interface.\n        const server = \"chirpstack.univ-lorawan.fr:8080\";\n        // The DevEUI for which we want to enqueue the downlink.\n        const devEui = device.identity.devEUI;\n        \n        // The API token (can be obtained through the ChirpStack web-interface).\n        const apiToken = device.lorawan.chirpstack.grpcApiKey;\n\n        // Create the client for the DeviceService.\n        const deviceService = new device_grpc.DeviceServiceClient(\n            server,\n            grpc.credentials.createInsecure(),\n        );\n\n        // Create the Metadata object.\n        const metadata = new grpc.Metadata();\n        metadata.set(\"authorization\", \"Bearer \" + apiToken);\n\n        //Flush downlink queue request\n        const flushReq = new device_pb.FlushDeviceQueueRequest();\n        flushReq.setDevEui(devEui);\n\n        //Send the request\n        deviceService.flushQueue(flushReq, metadata, (err, resp) => {\n            if (err !== null) {\n                node.error(`Can't flush ChirpStack downlink queue :  ${err}`);\n            }\n        });\n    }\n\n    // 2. Prepare downlink JSON\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"devEui\": device.identity.devEUI,\n            \"confirmed\": false,\n            \"fPort\": device.lorawan.downlinkPort,\n            \"object\": payload\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`); \n    return downlinkJson;\n}\n\n\n//////////////////////////////////////////////////////////////////////////\n// Actility Network Server \n/////////////////////////////////////////////////////////////////////////\nif (device.lorawan.networkServer == \"actility\") {\n    downlinkJson = {\n        \"topic\": device.mqtt.topicDownlink,\n        \"payload\": {\n            \"DevEUI_downlink\": {\n                \"DevEUI\": device.identity.devEUI,\n                \"FPort\": device.lorawan.downlinkPort,\n                \"payload\": payload,\n                \"FlushDownlinkQueue\": String(+device.lorawan.flushDownlinkQueue),\n                \"DriverCfg\": {\n                    \"app\": {\n                        \"pId\": device.lorawan.actility.driver.pId,\n                        \"mId\": device.lorawan.actility.driver.mId,\n                        \"ver\": device.lorawan.actility.driver.ver\n                    }\n                }\n            }\n        }\n    }\n    debug(device, \"txTime\", `${device.identity.deviceName} (${device.controller.protocol}) : TX time = ${Date.now() - device.transmitTime} ms`);\n    return downlinkJson;\n}\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "grpcJs",
                "module": "@grpc/grpc-js"
            },
            {
                "var": "chirpstack_device_grpc",
                "module": "@chirpstack/chirpstack-api/api/device_grpc_pb"
            },
            {
                "var": "chirpstack_device_pb",
                "module": "@chirpstack/chirpstack-api/api/device_pb"
            }
        ],
        "x": 1081.4285714285716,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "3bb590f1cf82155f",
        "type": "inject",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "5 seconds timer",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 90.71428571428578,
        "y": 560,
        "wires": [
            [
                "7236d826894b4b5f"
            ]
        ],
        "icon": "node-red/timer.svg",
        "l": false
    },
    {
        "id": "1e8c1d5be9a7fb4b",
        "type": "queue",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "",
        "input": "request",
        "inputType": "msg",
        "addFields": "\"\"",
        "addFieldsType": "json",
        "pourType": "initial",
        "pourTypeType": "pourType",
        "pourTime": "1",
        "pourTimeType": "num",
        "pourAmount": "1",
        "pourAmountType": "num",
        "maxUseMemory": "",
        "x": 478.57142857142867,
        "y": 560,
        "wires": [
            [
                "857ac9b66e081724"
            ]
        ]
    },
    {
        "id": "857ac9b66e081724",
        "type": "function",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "way selector",
        "func": "switch (msg.request[0].device.controller.protocol) {\n    case \"bacnet\":\n        // Rebuild the message correctly\n        msg = {\n            \"downlinkobject\" : msg.request[0].downlinkobject,\n            \"deviceName\":msg.request[0].deviceName,\n            \"device\": msg.request[0].device\n            }\n        return [null,msg];\n        break;\n    case \"restAPIBacnet\":\n        // Rebuild the message correctly\n        msg = {\n            \"method\":msg.request[0].method,\n            \"url\":msg.request[0].url,\n            \"headers\":msg.request[0].headers,\n            \"payload\":msg.request[0].payload,\n            \"requestTimeout\":msg.request[0].requestTimeout,\n            \"deviceName\":msg.request[0].deviceName,\n            \"device\": msg.request[0].device\n            }\n        return [msg,null];\n        break;\n    default:\n    node.status({fill:\"red\",shape:\"dot\",text:\"error unknown protocol\"});\n        \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 632.8571428571431,
        "y": 560,
        "wires": [
            [
                "860a414966bfaa39"
            ],
            [
                "322bfeaa66657067"
            ]
        ],
        "outputLabels": [
            "RrstAPIBacnet",
            "bacnet"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "322bfeaa66657067",
        "type": "junction",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "x": 925.7142857142858,
        "y": 560,
        "wires": [
            [
                "ac9bcd7370444592"
            ]
        ]
    },
    {
        "id": "6c57a60f497c0abd",
        "type": "complete",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "Http request complete handler",
        "scope": [
            "860a414966bfaa39"
        ],
        "uncaught": false,
        "x": 195.71428571428578,
        "y": 620,
        "wires": [
            [
                "11b737a512b17e56"
            ]
        ],
        "icon": "font-awesome/fa-check"
    },
    {
        "id": "11b737a512b17e56",
        "type": "change",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "name": "dequeue",
        "rules": [
            {
                "t": "set",
                "p": "dequeue",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395.7142857142858,
        "y": 620,
        "wires": [
            [
                "4ec71459aa9365ef"
            ]
        ]
    },
    {
        "id": "4ec71459aa9365ef",
        "type": "junction",
        "z": "d5185b34c44ae683",
        "g": "c48b6850274e56eb",
        "x": 394.2857142857142,
        "y": 560,
        "wires": [
            [
                "1e8c1d5be9a7fb4b"
            ]
        ]
    },
    {
        "id": "38c4db63982e52db",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]